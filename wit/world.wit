package munum:wasm;

interface vec2 {
    type pvec2 = u32;
    type pmat2 = u32;
    type pmat3 = u32;

    create: func(x: f64, y: f64) -> pvec2;
    free: func(src: pvec2);
    set: func(dst: pvec2, x: f64, y: f64) -> pvec2;
    copy: func(dst: pvec2, src: pvec2) -> pvec2;
    get: func(src: pvec2) -> tuple<f64, f64>;

    add: func(out: pvec2, a: pvec2, b: pvec2) -> pvec2;
    sub: func(out: pvec2, a: pvec2, b: pvec2) -> pvec2;
    mul: func(out: pvec2, m2: pmat2, a: pvec2) -> pvec2;
    mul3: func(out: pvec2, m3: pmat3, a: pvec2) -> pvec2;
    scale: func(out: pvec2, a: pvec2, s: f64) -> pvec2;
    norm: func(out: pvec2, a: pvec2) -> pvec2;
    dot: func(a: pvec2, b: pvec2) -> f64;
    sqr-len: func(a: pvec2) -> f64;
    len: func(a: pvec2) -> f64;
    lerp: func(out: pvec2, a: pvec2, b: pvec2, t: f64) -> pvec2;
}

interface vec3 {
    type pvec3 = u32;
    type pmat3 = u32;
    type pmat4 = u32;

    create: func(x: f64, y: f64, z: f64) -> pvec3;
    free: func(src: pvec3);
    set: func(dst: pvec3, x: f64, y: f64, z: f64) -> pvec3;
    copy: func(dst: pvec3, src: pvec3) -> pvec3;
    get: func(src: pvec3) -> tuple<f64, f64, f64>;

    add: func(out: pvec3, a: pvec3, b: pvec3) -> pvec3;
    sub: func(out: pvec3, a: pvec3, b: pvec3) -> pvec3;
    mul: func(out: pvec3, m3: pmat3, a: pvec3) -> pvec3;
    mul4: func(out: pvec3, m4: pmat4, a: pvec3) -> pvec3;
    cross: func(out: pvec3, a: pvec3, b: pvec3) -> pvec3;
    scale: func(out: pvec3, a: pvec3, s: f64) -> pvec3;
    norm: func(out: pvec3, a: pvec3) -> pvec3;
    dot: func(a: pvec3, b: pvec3) -> f64;
    sqr-len: func(a: pvec3) -> f64;
    len: func(a: pvec3) -> f64;
    lerp: func(out: pvec3, a: pvec3, b: pvec3, t: f64) -> pvec3;
}

interface vec4 {
    type pvec4 = u32;
    type pmat4 = u32;

    create: func(x: f64, y: f64, z: f64, w: f64) -> pvec4;
    free: func(src: pvec4);
    set: func(dst: pvec4, x: f64, y: f64, z: f64, w: f64) -> pvec4;
    copy: func(dst: pvec4, src: pvec4) -> pvec4;
    get: func(src: pvec4) -> tuple<f64, f64, f64, f64>;

    add: func(out: pvec4, a: pvec4, b: pvec4) -> pvec4;
    sub: func(out: pvec4, a: pvec4, b: pvec4) -> pvec4;
    mul: func(out: pvec4, m4: pmat4, a: pvec4) -> pvec4;
    scale: func(out: pvec4, a: pvec4, s: f64) -> pvec4;
    norm: func(out: pvec4, a: pvec4) -> pvec4;
    dot: func(a: pvec4, b: pvec4) -> f64;
    sqr-len: func(a: pvec4) -> f64;
    len: func(a: pvec4) -> f64;
    lerp: func(out: pvec4, a: pvec4, b: pvec4, t: f64) -> pvec4;
}

interface quat {
    type pquat = u32;
    type pvec3 = u32;

    create: func(x: f64, y: f64, z: f64, w: f64) -> pquat;
    from-unit-vecs: func(from-vec: pvec3, to-vec: pvec3) -> pquat;
    from-axis-angle: func(axis: pvec3, angle: f64) -> pquat;
    from-angle-x: func(angle: f64) -> pquat;
    from-angle-y: func(angle: f64) -> pquat;
    from-angle-z: func(angle: f64) -> pquat;
    free: func(src: pquat);
    set: func(dst: pquat, x: f64, y: f64, z: f64, w: f64) -> pquat;
    copy: func(dst: pquat, src: pquat) -> pquat;
    get: func(src: pquat) -> tuple<f64, f64, f64, f64>;

    mul: func(out: pquat, a: pquat, b: pquat) -> pquat;
    rotate-vec3: func(out: pvec3, q: pquat, v: pvec3) -> pvec3;
    norm: func(out: pquat, a: pquat) -> pquat;
    dot: func(a: pquat, b: pquat) -> f64;
    sqr-len: func(a: pquat) -> f64;
    len: func(a: pquat) -> f64;
    conj: func(out: pquat, a: pquat) -> pquat;
    invert: func(out: pquat, a: pquat) -> bool;
    lerp: func(out: pquat, a: pquat, b: pquat, t: f64) -> pquat;
    slerp: func(out: pquat, a: pquat, b: pquat, t: f64) -> pquat;
}

interface mat2 {
    type pmat2 = u32;
    type pmat3 = u32;

    create: func() -> pmat2;
    identity: func(dst: pmat2) -> pmat2;
    from-mat3: func(src: pmat3) -> pmat2;
    free: func(src: pmat2);
    set: func(dst: pmat2, m00: f64, m10: f64, m01: f64, m11: f64) -> pmat2;
    copy: func(dst: pmat2, src: pmat2) -> pmat2;
    get: func(src: pmat2) -> tuple<f64, f64, f64, f64>;

    add: func(out: pmat2, a: pmat2, b: pmat2) -> pmat2;
    sub: func(out: pmat2, a: pmat2, b: pmat2) -> pmat2;
    mul: func(out: pmat2, m2: pmat2, a: pmat2) -> pmat2;
    scale: func(out: pmat2, a: pmat2, s: f64) -> pmat2;
    transpose: func(out: pmat2, a: pmat2) -> pmat2;
    invert: func(out: pmat2, a: pmat2) -> bool;
    det: func(a: pmat2) -> f64;
}

interface mat3 {
    type pmat2 = u32;
    type pmat3 = u32;
    type pmat4 = u32;

    create: func() -> pmat3;
    identity: func(dst: pmat3) -> pmat3;
    from-mat2: func(src: pmat2) -> pmat3;
    from-mat4: func(src: pmat4) -> pmat3;
    free: func(src: pmat3);
    set: func(dst: pmat3, m00: f64, m10: f64, m20: f64, m01: f64, m11: f64, m21: f64, m02: f64, m12: f64, m22: f64) -> pmat3;
    copy: func(dst: pmat3, src: pmat3) -> pmat3;
    get: func(src: pmat3) -> tuple<f64, f64, f64, f64, f64, f64, f64, f64, f64>;

    add: func(out: pmat3, a: pmat3, b: pmat3) -> pmat3;
    sub: func(out: pmat3, a: pmat3, b: pmat3) -> pmat3;
    mul: func(out: pmat3, m2: pmat3, a: pmat3) -> pmat3;
    scale: func(out: pmat3, a: pmat3, s: f64) -> pmat3;
    transpose: func(out: pmat3, a: pmat3) -> pmat3;
    invert: func(out: pmat3, a: pmat3) -> bool;
    normal-mat: func(out: pmat3, a: pmat3) -> bool;
    det: func(a: pmat3) -> f64;
}

interface mat4 {
    type pmat3 = u32;
    type pmat4 = u32;

    create: func() -> pmat4;
    identity: func(dst: pmat4) -> pmat4;
    from-mat3: func(src: pmat3) -> pmat4;
    free: func(src: pmat4);
    set: func(dst: pmat4, m00: f64, m10: f64, m20: f64, m30: f64, m01: f64, m11: f64, m21: f64, m31: f64, m02: f64, m12: f64, m22: f64, m32: f64, m03: f64, m13: f64, m23: f64, m33: f64) -> pmat4;
    copy: func(dst: pmat4, src: pmat4) -> pmat4;
    get: func(src: pmat4) -> tuple<f64, f64, f64, f64, f64, f64, f64, f64, f64, f64, f64, f64, f64, f64, f64, f64>;

    add: func(out: pmat4, a: pmat4, b: pmat4) -> pmat4;
    sub: func(out: pmat4, a: pmat4, b: pmat4) -> pmat4;
    mul: func(out: pmat4, m2: pmat4, a: pmat4) -> pmat4;
    scale: func(out: pmat4, a: pmat4, s: f64) -> pmat4;
    transpose: func(out: pmat4, a: pmat4) -> pmat4;
    invert: func(out: pmat4, a: pmat4) -> bool;
    det: func(a: pmat4) -> f64;
}

interface transform2d {
    type pvec2 = u32;
    type pmat3 = u32;

    translation: func(out: pmat3, v: pvec2) -> pmat3;
    scaling: func(out: pmat3, v: pvec2) -> pmat3;
    rotation: func(out: pmat3, theta: f64) -> pmat3;
    transformation: func(out: pmat3, translate: pvec2, rotate: f64, scale: pvec2) -> pmat3;
}

interface transform {
    type pvec3 = u32;
    type pmat3 = u32;
    type pmat4 = u32;
    type pquat = u32;

    translation: func(out: pmat4, v: pvec3) -> pmat4;
    scaling: func(out: pmat4, v: pvec3) -> pmat4;
    rotation: func(out: pmat4, q: pquat) -> pmat4;
    translation-of: func(out: pvec3, m: pmat4) -> pvec3;
    scaling-of: func(out: pvec3, m: pmat4) -> pvec3;
    rotation-of: func(out: pquat, m: pmat4) -> pquat;

    transformation: func(out: pmat4, translate: pvec3, rotate: pquat, scale: pvec3) -> pmat4;
    invert-trs: func(out: pmat4, trs: pmat4) -> pmat4;

    ortho: func(out: pmat4, left: f64, right: f64, bottom: f64, top: f64, znear: f64, zfar: f64) -> pmat4;
    perspective: func(out: pmat4, aspect: f64, yfov: f64, znear: f64, zfar: f64) -> pmat4;
    perspective-viewport: func(out: pmat4, left: f64, right: f64, bottom: f64, top: f64, znear: f64, zfar: f64) -> pmat4;

    target-to: func(out: pmat4, eye: pvec3, center: pvec3, up: pvec3) -> pmat4;
    look-at: func(out: pmat4, eye: pvec3, center: pvec3, up: pvec3) -> pmat4;
    look-at-dir: func(out: pvec3, pitch: f64, yaw: f64) -> pvec3;
}

world root {
    import jsmath: interface {
        acos: func(theta: f64) -> f64;
        cos: func(theta: f64) -> f64;
        sin: func(theta: f64) -> f64;
        sqrt: func(x: f64) -> f64;
        tan: func(theta: f64) -> f64;
    }

    export vec2;
    export vec3;
    export vec4;
    export quat;
    export mat2;
    export mat3;
    export mat4;
    export transform2d;
    export transform;
}
