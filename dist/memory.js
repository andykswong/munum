const BYTES_PER_FLOAT64=8;let memoryManager;export function setMemoryManager(manager){memoryManager=manager}let usingFinalizationRegistry=true;export function useFinalizationRegistry(use){usingFinalizationRegistry=use}const registry=global.FinalizationRegistry&&new FinalizationRegistry(([ptr,size])=>memoryManager.free(ptr,size));function register(arr){usingFinalizationRegistry&&registry?.register(arr,[arr.byteOffset,arr.length],arr)}function unregister(arr){usingFinalizationRegistry&&registry?.unregister(arr)}export class ManagedFloat64Array{constructor(byteOffset){this.byteOffset=byteOffset;register(this)}*[Symbol.iterator](){if(!this.valid){return}const view=memoryManager.view;const offset=this.byteOffset/BYTES_PER_FLOAT64|0;for(let i=0;i<this.length&&offset+i<view.length;i++){yield view[offset+i]}}[Symbol.dispose](){this.free()}at(index){if(index<0||index>=this.length){return}return memoryManager.view[this.byteOffset/BYTES_PER_FLOAT64+index|0]}setAt(index,value){if(index<0||index>=this.length){return}memoryManager.view[this.byteOffset/BYTES_PER_FLOAT64+index|0]=value}copy(from,dstOffset=0,srcOffset=0,length=Math.min(from.length-srcOffset,this.length-dstOffset)){const start=from.byteOffset/BYTES_PER_FLOAT64+srcOffset|0;memoryManager.view.copyWithin(this.byteOffset/BYTES_PER_FLOAT64+dstOffset|0,start,start+length)}set(array,offset=0){memoryManager.view.set(array,this.byteOffset/BYTES_PER_FLOAT64+offset|0)}free(){if(this.byteOffset>0){memoryManager.free(this.byteOffset,this.length);unregister(this);this.byteOffset=-Infinity}}get buffer(){return memoryManager.buffer}get byteLength(){return this.length*BYTES_PER_FLOAT64}get valid(){return this.byteOffset>=0}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCWVRFU19QRVJfRkxPQVQ2NCIsIm1lbW9yeU1hbmFnZXIiLCJzZXRNZW1vcnlNYW5hZ2VyIiwibWFuYWdlciIsInVzaW5nRmluYWxpemF0aW9uUmVnaXN0cnkiLCJ1c2VGaW5hbGl6YXRpb25SZWdpc3RyeSIsInVzZSIsInJlZ2lzdHJ5IiwiZ2xvYmFsIiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJwdHIiLCJzaXplIiwiZnJlZSIsInJlZ2lzdGVyIiwiYXJyIiwiYnl0ZU9mZnNldCIsImxlbmd0aCIsInVucmVnaXN0ZXIiLCJNYW5hZ2VkRmxvYXQ2NEFycmF5IiwiY29uc3RydWN0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsInZhbGlkIiwidmlldyIsIm9mZnNldCIsImkiLCJkaXNwb3NlIiwiYXQiLCJpbmRleCIsInNldEF0IiwidmFsdWUiLCJjb3B5IiwiZnJvbSIsImRzdE9mZnNldCIsInNyY09mZnNldCIsIk1hdGgiLCJtaW4iLCJzdGFydCIsImNvcHlXaXRoaW4iLCJzZXQiLCJhcnJheSIsIkluZmluaXR5IiwiYnVmZmVyIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VzIjpbIi4uL2pzL21lbW9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCWVRFU19QRVJfRkxPQVQ2NCA9IDg7XG5cbi8qKiBBIGxpbmVhciBtZW1vcnkgbWFuYWdlci4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVtb3J5TWFuYWdlciB7XG4gIC8qKiBUaGUgYWN0aXZlIG1lbW9yeSBidWZmZXIuICovXG4gIHJlYWRvbmx5IGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlO1xuXG4gIC8qKiBUaGUgYWN0aXZlIGZsb2F0NjQgbWVtb3J5IHZpZXcuICovXG4gIHJlYWRvbmx5IHZpZXc6IEZsb2F0NjRBcnJheTtcblxuICAvKiogQWxsb2NhdGVzIGdpdmVuIHNpemUgb2YgbWVtb3J5IGluIHRoZSBudW1iZXIgb2YgZmxvYXQ2NCBhbmQgcmV0dXJucyB0aGUgYnl0ZU9mZnNldCBwb2ludGluZyB0byB0aGUgbmV3IG1lbW9yeS4gKi9cbiAgY3JlYXRlKHNpemU6IG51bWJlcik6IG51bWJlcjtcblxuICAvKiogRnJlZXMgdGhlIG1lbW9yeSBhdCBnaXZlbiBieXRlT2Zmc2V0IGFuZCBzaXplIGluIHRoZSBudW1iZXIgb2YgZmxvYXQ2NC4gKi9cbiAgZnJlZShieXRlT2Zmc2V0OiBudW1iZXIsIHNpemU6IG51bWJlcik6IHZvaWQ7XG59XG5cbi8qKiBUaGUge0BsaW5rIE1lbW9yeU1hbmFnZXJ9IHRvIHVzZS4gKi9cbmxldCBtZW1vcnlNYW5hZ2VyOiBNZW1vcnlNYW5hZ2VyO1xuXG4vKiogU2V0cyB0aGUge0BsaW5rIE1lbW9yeU1hbmFnZXJ9IHRvIHVzZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRNZW1vcnlNYW5hZ2VyKG1hbmFnZXI6IE1lbW9yeU1hbmFnZXIpOiB2b2lkIHtcbiAgbWVtb3J5TWFuYWdlciA9IG1hbmFnZXI7XG59XG5cbmxldCB1c2luZ0ZpbmFsaXphdGlvblJlZ2lzdHJ5ID0gdHJ1ZTtcblxuLyoqIFNldHMgaWYgRmluYWxpemF0aW9uUmVnaXN0cnkgc2hvdWxkIGJlIHVzZWQgZm9yIGF1dG9tYXRpYyBtZW1vcnkgY2xlYW51cC4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGaW5hbGl6YXRpb25SZWdpc3RyeSh1c2U6IGJvb2xlYW4pOiB2b2lkIHtcbiAgdXNpbmdGaW5hbGl6YXRpb25SZWdpc3RyeSA9IHVzZTtcbn1cblxuY29uc3QgcmVnaXN0cnkgPSBnbG9iYWwuRmluYWxpemF0aW9uUmVnaXN0cnkgJiZcbiAgbmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KChbcHRyLCBzaXplXTogW251bWJlciwgbnVtYmVyXSkgPT4gbWVtb3J5TWFuYWdlci5mcmVlKHB0ciwgc2l6ZSkpO1xuXG5mdW5jdGlvbiByZWdpc3RlcihhcnI6IE1hbmFnZWRCdWZmZXJWaWV3KTogdm9pZCB7XG4gIHVzaW5nRmluYWxpemF0aW9uUmVnaXN0cnkgJiYgcmVnaXN0cnk/LnJlZ2lzdGVyKGFyciwgW2Fyci5ieXRlT2Zmc2V0LCBhcnIubGVuZ3RoXSwgYXJyKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcihhcnI6IE1hbmFnZWRCdWZmZXJWaWV3KTogdm9pZCB7XG4gIHVzaW5nRmluYWxpemF0aW9uUmVnaXN0cnkgJiYgcmVnaXN0cnk/LnVucmVnaXN0ZXIoYXJyKTtcbn1cblxuLyoqIEEgd3JhcHBlZCBUeXBlZEFycmF5IHRoYXQgcmVxdWlyZXMgZXhwbGljaXQgbWVtb3J5IG1hbmFnZW1lbnQuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hbmFnZWRCdWZmZXJWaWV3PE4gZXh0ZW5kcyBudW1iZXIgPSBudW1iZXI+IGV4dGVuZHMgQXJyYXlCdWZmZXJWaWV3LCBEaXNwb3NhYmxlIHtcbiAgLyoqIFdoZXRoZXIgdGhlIGFycmF5IGlzIHN0aWxsIHZhbGlkLiAqL1xuICByZWFkb25seSB2YWxpZDogYm9vbGVhbjtcblxuICAvKiogVGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkuICovXG4gIHJlYWRvbmx5IGxlbmd0aDogTjtcblxuICAvKiogRnJlZXMgdGhlIGFycmF5LiAqL1xuICBmcmVlKCk6IHZvaWQ7XG59XG5cbi8qKiBBIG1hbmFnZWQgRmxvYXQ2NEFycmF5LiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1hbmFnZWRGbG9hdDY0QXJyYXk8TiBleHRlbmRzIG51bWJlciA9IG51bWJlcj5cbiAgaW1wbGVtZW50cyBNYW5hZ2VkQnVmZmVyVmlldzxOPiwgSXRlcmFibGU8bnVtYmVyPiB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBieXRlT2Zmc2V0OiBudW1iZXIpIHtcbiAgICByZWdpc3Rlcih0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8bnVtYmVyPiB7XG4gICAgaWYgKCF0aGlzLnZhbGlkKSB7IHJldHVybjsgfVxuICAgIGNvbnN0IHZpZXcgPSBtZW1vcnlNYW5hZ2VyLnZpZXc7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKHRoaXMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0KSB8IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiBvZmZzZXQgKyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgeWllbGQgdmlld1tvZmZzZXQgKyBpXTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgW1N5bWJvbC5kaXNwb3NlXSgpOiB2b2lkIHtcbiAgICB0aGlzLmZyZWUoKTtcbiAgfVxuXG4gIC8qKiBHZXRzIHRoZSB2YWx1ZSBhdCBnaXZlbiBpbmRleC4gKi9cbiAgcHVibGljIGF0KGluZGV4OiBudW1iZXIpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGgpIHsgcmV0dXJuOyB9XG4gICAgcmV0dXJuIG1lbW9yeU1hbmFnZXIudmlld1sodGhpcy5ieXRlT2Zmc2V0IC8gQllURVNfUEVSX0ZMT0FUNjQgKyBpbmRleCkgfCAwXTtcbiAgfVxuXG4gIC8qKiBTZXRzIHRoZSB2YWx1ZSBhdCBnaXZlbiBpbmRleC4gKi9cbiAgcHVibGljIHNldEF0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKSB7IHJldHVybjsgfVxuICAgIG1lbW9yeU1hbmFnZXIudmlld1sodGhpcy5ieXRlT2Zmc2V0IC8gQllURVNfUEVSX0ZMT0FUNjQgKyBpbmRleCkgfCAwXSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqIENvcGllcyBhIG1hbmFnZWQgYXJyYXkgdG8gdGhpcy4gKi9cbiAgcHVibGljIGNvcHkoXG4gICAgZnJvbTogTWFuYWdlZEZsb2F0NjRBcnJheSwgZHN0T2Zmc2V0ID0gMCwgc3JjT2Zmc2V0ID0gMCxcbiAgICBsZW5ndGggPSBNYXRoLm1pbihmcm9tLmxlbmd0aCAtIHNyY09mZnNldCwgdGhpcy5sZW5ndGggLSBkc3RPZmZzZXQpXG4gICkge1xuICAgIGNvbnN0IHN0YXJ0ID0gKGZyb20uYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0ICsgc3JjT2Zmc2V0KSB8IDA7XG4gICAgbWVtb3J5TWFuYWdlci52aWV3LmNvcHlXaXRoaW4oKHRoaXMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0ICsgZHN0T2Zmc2V0KSB8IDAsIHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gIH1cblxuICAvKiogQ29waWVzIGFuIGFycmF5IHRvIHRoaXMuICovXG4gIHB1YmxpYyBzZXQoYXJyYXk6IEFycmF5TGlrZTxudW1iZXI+LCBvZmZzZXQgPSAwKSB7XG4gICAgbWVtb3J5TWFuYWdlci52aWV3LnNldChhcnJheSwgKHRoaXMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0ICsgb2Zmc2V0KSB8IDApO1xuICB9XG5cbiAgcHVibGljIGZyZWUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYnl0ZU9mZnNldCA+IDApIHtcbiAgICAgIG1lbW9yeU1hbmFnZXIuZnJlZSh0aGlzLmJ5dGVPZmZzZXQsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHVucmVnaXN0ZXIodGhpcyk7XG4gICAgICB0aGlzLmJ5dGVPZmZzZXQgPSAtSW5maW5pdHk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBidWZmZXIoKTogQXJyYXlCdWZmZXJMaWtlIHtcbiAgICByZXR1cm4gbWVtb3J5TWFuYWdlci5idWZmZXI7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGJ5dGVMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggKiBCWVRFU19QRVJfRkxPQVQ2NDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldCA+PSAwO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGxlbmd0aDogTjtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsS0FBTSxDQUFBQSxpQkFBaUIsQ0FBRyxDQUFDLENBa0IzQixHQUFJLENBQUFDLGFBQTRCLENBR2hDLE1BQU8sU0FBUyxDQUFBQyxnQkFBZ0JBLENBQUNDLE9BQXNCLENBQVEsQ0FDN0RGLGFBQWEsQ0FBR0UsT0FDbEIsQ0FFQSxHQUFJLENBQUFDLHlCQUF5QixDQUFHLElBQUksQ0FHcEMsTUFBTyxTQUFTLENBQUFDLHVCQUF1QkEsQ0FBQ0MsR0FBWSxDQUFRLENBQzFERix5QkFBeUIsQ0FBR0UsR0FDOUIsQ0FFQSxLQUFNLENBQUFDLFFBQVEsQ0FBR0MsTUFBTSxDQUFDQyxvQkFBb0IsRUFDMUMsR0FBSSxDQUFBQSxvQkFBb0IsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBRUMsSUFBSSxDQUFtQixHQUFLVixhQUFhLENBQUNXLElBQUksQ0FBQ0YsR0FBRyxDQUFFQyxJQUFJLENBQUMsQ0FBQyxDQUU1RixRQUFTLENBQUFFLFFBQVFBLENBQUNDLEdBQXNCLENBQVEsQ0FDOUNWLHlCQUF5QixFQUFJRyxRQUFRLEVBQUVNLFFBQVEsQ0FBQ0MsR0FBRyxDQUFFLENBQUNBLEdBQUcsQ0FBQ0MsVUFBVSxDQUFFRCxHQUFHLENBQUNFLE1BQU0sQ0FBQyxDQUFFRixHQUFHLENBQ3hGLENBRUEsUUFBUyxDQUFBRyxVQUFVQSxDQUFDSCxHQUFzQixDQUFRLENBQ2hEVix5QkFBeUIsRUFBSUcsUUFBUSxFQUFFVSxVQUFVLENBQUNILEdBQUcsQ0FDdkQsQ0FlQSxNQUFPLE1BQWUsQ0FBQUksbUJBQzhCLENBRTNDQyxXQUFXQSxDQUFRSixVQUFrQixDQUFFLE1BQXBCQSxVQUFrQixDQUFsQkEsVUFBa0IsQ0FDMUNGLFFBQVEsQ0FBQyxJQUFJLENBQ2YsQ0FFQSxFQUFTTyxNQUFNLENBQUNDLFFBQVEsR0FBc0IsQ0FDNUMsR0FBSSxDQUFDLElBQUksQ0FBQ0MsS0FBSyxDQUFFLENBQUUsTUFBUSxDQUMzQixLQUFNLENBQUFDLElBQUksQ0FBR3RCLGFBQWEsQ0FBQ3NCLElBQUksQ0FDL0IsS0FBTSxDQUFBQyxNQUFNLENBQUksSUFBSSxDQUFDVCxVQUFVLENBQUdmLGlCQUFpQixDQUFJLENBQUMsQ0FDeEQsSUFBSyxHQUFJLENBQUF5QixDQUFDLENBQUcsQ0FBQyxDQUFFQSxDQUFDLENBQUcsSUFBSSxDQUFDVCxNQUFNLEVBQUlRLE1BQU0sQ0FBR0MsQ0FBQyxDQUFHRixJQUFJLENBQUNQLE1BQU0sQ0FBRVMsQ0FBQyxFQUFFLENBQUUsQ0FDaEUsS0FBTSxDQUFBRixJQUFJLENBQUNDLE1BQU0sQ0FBR0MsQ0FBQyxDQUN2QixDQUNGLENBRUEsQ0FBUUwsTUFBTSxDQUFDTSxPQUFPLEdBQVUsQ0FDOUIsSUFBSSxDQUFDZCxJQUFJLENBQUMsQ0FDWixDQUdPZSxFQUFFQSxDQUFDQyxLQUFhLENBQXNCLENBQzNDLEdBQUlBLEtBQUssQ0FBRyxDQUFDLEVBQUlBLEtBQUssRUFBSSxJQUFJLENBQUNaLE1BQU0sQ0FBRSxDQUFFLE1BQVEsQ0FDakQsTUFBTyxDQUFBZixhQUFhLENBQUNzQixJQUFJLENBQUUsSUFBSSxDQUFDUixVQUFVLENBQUdmLGlCQUFpQixDQUFHNEIsS0FBSyxDQUFJLENBQUMsQ0FDN0UsQ0FHT0MsS0FBS0EsQ0FBQ0QsS0FBYSxDQUFFRSxLQUFhLENBQUUsQ0FDekMsR0FBSUYsS0FBSyxDQUFHLENBQUMsRUFBSUEsS0FBSyxFQUFJLElBQUksQ0FBQ1osTUFBTSxDQUFFLENBQUUsTUFBUSxDQUNqRGYsYUFBYSxDQUFDc0IsSUFBSSxDQUFFLElBQUksQ0FBQ1IsVUFBVSxDQUFHZixpQkFBaUIsQ0FBRzRCLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBR0UsS0FDMUUsQ0FHT0MsSUFBSUEsQ0FDVEMsSUFBeUIsQ0FBRUMsU0FBUyxDQUFHLENBQUMsQ0FBRUMsU0FBUyxDQUFHLENBQUMsQ0FDdkRsQixNQUFNLENBQUdtQixJQUFJLENBQUNDLEdBQUcsQ0FBQ0osSUFBSSxDQUFDaEIsTUFBTSxDQUFHa0IsU0FBUyxDQUFFLElBQUksQ0FBQ2xCLE1BQU0sQ0FBR2lCLFNBQVMsQ0FBQyxDQUNuRSxDQUNBLEtBQU0sQ0FBQUksS0FBSyxDQUFJTCxJQUFJLENBQUNqQixVQUFVLENBQUdmLGlCQUFpQixDQUFHa0MsU0FBUyxDQUFJLENBQUMsQ0FDbkVqQyxhQUFhLENBQUNzQixJQUFJLENBQUNlLFVBQVUsQ0FBRSxJQUFJLENBQUN2QixVQUFVLENBQUdmLGlCQUFpQixDQUFHaUMsU0FBUyxDQUFJLENBQUMsQ0FBRUksS0FBSyxDQUFFQSxLQUFLLENBQUdyQixNQUFNLENBQzVHLENBR091QixHQUFHQSxDQUFDQyxLQUF3QixDQUFFaEIsTUFBTSxDQUFHLENBQUMsQ0FBRSxDQUMvQ3ZCLGFBQWEsQ0FBQ3NCLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQ0MsS0FBSyxDQUFHLElBQUksQ0FBQ3pCLFVBQVUsQ0FBR2YsaUJBQWlCLENBQUd3QixNQUFNLENBQUksQ0FBQyxDQUNsRixDQUVPWixJQUFJQSxDQUFBLENBQVMsQ0FDbEIsR0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBRyxDQUFDLENBQUUsQ0FDdkJkLGFBQWEsQ0FBQ1csSUFBSSxDQUFDLElBQUksQ0FBQ0csVUFBVSxDQUFFLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQ2hEQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQ2hCLElBQUksQ0FBQ0YsVUFBVSxDQUFHLENBQUMwQixRQUNyQixDQUNGLENBRUEsR0FBVyxDQUFBQyxNQUFNQSxDQUFBLENBQW9CLENBQ25DLE1BQU8sQ0FBQXpDLGFBQWEsQ0FBQ3lDLE1BQ3ZCLENBRUEsR0FBVyxDQUFBQyxVQUFVQSxDQUFBLENBQVcsQ0FDOUIsTUFBTyxLQUFJLENBQUMzQixNQUFNLENBQUdoQixpQkFDdkIsQ0FFQSxHQUFXLENBQUFzQixLQUFLQSxDQUFBLENBQVksQ0FDMUIsTUFBTyxLQUFJLENBQUNQLFVBQVUsRUFBSSxDQUM1QixDQUdGIiwiaWdub3JlTGlzdCI6W119