const BYTES_PER_FLOAT64=8;let memoryManager;export function setMemoryManager(manager){memoryManager=manager}let usingFinalizationRegistry=true;export function useFinalizationRegistry(use){usingFinalizationRegistry=use}const registry=global.FinalizationRegistry&&new FinalizationRegistry(([ptr,size])=>memoryManager.free(ptr,size));function register(arr){usingFinalizationRegistry&&registry?.register(arr,[arr.byteOffset,arr.length],arr)}function unregister(arr){usingFinalizationRegistry&&registry?.unregister(arr)}export class ManagedFloat64Array{constructor(byteOffset){this.byteOffset=byteOffset;register(this)}*[Symbol.iterator](){if(!this.valid){return}const view=memoryManager.view;const offset=this.byteOffset/BYTES_PER_FLOAT64|0;for(let i=0;i<this.length&&offset+i<view.length;i++){yield view[offset+i]}}[Symbol.dispose](){this.free()}at(index){if(index<0||index>=this.length){return}return memoryManager.view.at(this.byteOffset/BYTES_PER_FLOAT64+index|0)}copy(from,offset=0,length=Math.min(from.length,this.length-offset)){const start=from.byteOffset/BYTES_PER_FLOAT64|0;memoryManager.view.copyWithin(this.byteOffset/BYTES_PER_FLOAT64+offset|0,start,start+length)}set(array,offset=0){memoryManager.view.set(array,this.byteOffset/BYTES_PER_FLOAT64+offset|0)}free(){if(this.byteOffset>0){memoryManager.free(this.byteOffset,this.length);unregister(this);this.byteOffset=-Infinity}}get buffer(){return memoryManager.buffer}get byteLength(){return this.length*BYTES_PER_FLOAT64}get valid(){return this.byteOffset>=0}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,