import{free,memory}from"../../wasm/index.js";const BYTES_PER_FLOAT64=8;const registry=global.FinalizationRegistry&&new FinalizationRegistry(([ptr,size])=>free(ptr,size));function register(arr){registry?.register(arr,[arr.byteOffset,arr.length],arr)}function unregister(arr){registry?.unregister(arr)}let view=new Float64Array(memory.buffer);export function getMemoryView(){if(view.buffer!==memory.buffer){view=new Float64Array(memory.buffer)}return view}export class ManagedFloat64Array{constructor(byteOffset){this.byteOffset=byteOffset;register(this)}*[Symbol.iterator](){const view=getMemoryView();const offset=this.byteOffset/BYTES_PER_FLOAT64|0;for(let i=0;i<this.length&&offset+i<view.length;i++){yield view[offset+i]}}[Symbol.dispose](){this.free()}at(index){return getMemoryView().at(this.byteOffset/BYTES_PER_FLOAT64+index|0)}copy(from,offset=0,length=Math.min(from.length,this.length-offset)){const start=from.byteOffset/BYTES_PER_FLOAT64|0;getMemoryView().copyWithin(this.byteOffset/BYTES_PER_FLOAT64+offset|0,start,start+length)}set(array,offset=0){getMemoryView().set(array,this.byteOffset/BYTES_PER_FLOAT64+offset|0)}free(){if(this.byteOffset>0){free(this.byteOffset,this.length);unregister(this);this.byteOffset=-Infinity}}get buffer(){return memory.buffer}get byteLength(){return this.length*BYTES_PER_FLOAT64}get valid(){return this.byteOffset>0}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcmVlIiwibWVtb3J5IiwiQllURVNfUEVSX0ZMT0FUNjQiLCJyZWdpc3RyeSIsImdsb2JhbCIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwicHRyIiwic2l6ZSIsInJlZ2lzdGVyIiwiYXJyIiwiYnl0ZU9mZnNldCIsImxlbmd0aCIsInVucmVnaXN0ZXIiLCJ2aWV3IiwiRmxvYXQ2NEFycmF5IiwiYnVmZmVyIiwiZ2V0TWVtb3J5VmlldyIsIk1hbmFnZWRGbG9hdDY0QXJyYXkiLCJjb25zdHJ1Y3RvciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2Zmc2V0IiwiaSIsImRpc3Bvc2UiLCJhdCIsImluZGV4IiwiY29weSIsImZyb20iLCJNYXRoIiwibWluIiwic3RhcnQiLCJjb3B5V2l0aGluIiwic2V0IiwiYXJyYXkiLCJJbmZpbml0eSIsImJ5dGVMZW5ndGgiLCJ2YWxpZCJdLCJzb3VyY2VzIjpbIi4uLy4uL2pzL3dhc20vbWVtb3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyZWUsIG1lbW9yeSB9IGZyb20gJy4uLy4uL3dhc20vaW5kZXguanMnO1xuXG5jb25zdCBCWVRFU19QRVJfRkxPQVQ2NCA9IDg7XG5cbmNvbnN0IHJlZ2lzdHJ5ID0gZ2xvYmFsLkZpbmFsaXphdGlvblJlZ2lzdHJ5ICYmXG4gIG5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeSgoW3B0ciwgc2l6ZV06IFtudW1iZXIsIG51bWJlcl0pID0+IGZyZWUocHRyLCBzaXplKSk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyKGFycjogTWFuYWdlZEJ1ZmZlclZpZXcpOiB2b2lkIHtcbiAgcmVnaXN0cnk/LnJlZ2lzdGVyKGFyciwgW2Fyci5ieXRlT2Zmc2V0LCBhcnIubGVuZ3RoXSwgYXJyKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcihhcnI6IE1hbmFnZWRCdWZmZXJWaWV3KTogdm9pZCB7XG4gIHJlZ2lzdHJ5Py51bnJlZ2lzdGVyKGFycik7XG59XG5cbmxldCB2aWV3ID0gbmV3IEZsb2F0NjRBcnJheShtZW1vcnkuYnVmZmVyKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW1vcnlWaWV3KCk6IEZsb2F0NjRBcnJheSB7XG4gIGlmICh2aWV3LmJ1ZmZlciAhPT0gbWVtb3J5LmJ1ZmZlcikge1xuICAgIHZpZXcgPSBuZXcgRmxvYXQ2NEFycmF5KG1lbW9yeS5idWZmZXIpO1xuICB9XG4gIHJldHVybiB2aWV3O1xufVxuXG4vKiogQSB3cmFwcGVkIFR5cGVkQXJyYXkgdGhhdCByZXF1aXJlcyBleHBsaWNpdCBtZW1vcnkgbWFuYWdlbWVudC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWFuYWdlZEJ1ZmZlclZpZXc8TiBleHRlbmRzIG51bWJlciA9IG51bWJlcj4gZXh0ZW5kcyBBcnJheUJ1ZmZlclZpZXcsIERpc3Bvc2FibGUge1xuICAvKiogV2hldGhlciB0aGUgYXJyYXkgaXMgc3RpbGwgdmFsaWQuICovXG4gIHJlYWRvbmx5IHZhbGlkOiBib29sZWFuO1xuXG4gIC8qKiBUaGUgbGVuZ3RoIG9mIHRoZSBhcnJheS4gKi9cbiAgcmVhZG9ubHkgbGVuZ3RoOiBOO1xuXG4gIC8qKiBGcmVlcyB0aGUgYXJyYXkuICovXG4gIGZyZWUoKTogdm9pZDtcbn1cblxuLyoqIEEgbWFuYWdlZCBGbG9hdDY0QXJyYXkuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTWFuYWdlZEZsb2F0NjRBcnJheTxOIGV4dGVuZHMgbnVtYmVyID0gbnVtYmVyPlxuICBpbXBsZW1lbnRzIE1hbmFnZWRCdWZmZXJWaWV3PE4+LCBJdGVyYWJsZTxudW1iZXI+IHtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHB1YmxpYyBieXRlT2Zmc2V0OiBudW1iZXIpIHtcbiAgICByZWdpc3Rlcih0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8bnVtYmVyPiB7XG4gICAgY29uc3QgdmlldyA9IGdldE1lbW9yeVZpZXcoKTtcbiAgICBjb25zdCBvZmZzZXQgPSAodGhpcy5ieXRlT2Zmc2V0IC8gQllURVNfUEVSX0ZMT0FUNjQpIHwgMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIG9mZnNldCArIGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB5aWVsZCB2aWV3W29mZnNldCArIGldO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBbU3ltYm9sLmRpc3Bvc2VdKCk6IHZvaWQge1xuICAgIHRoaXMuZnJlZSgpO1xuICB9XG5cbiAgLyoqIEdldHMgdGhlIHZhbHVlIGF0IGdpdmVuIGluZGV4LiAqL1xuICBwdWJsaWMgYXQoaW5kZXg6IG51bWJlcik6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGdldE1lbW9yeVZpZXcoKS5hdCgodGhpcy5ieXRlT2Zmc2V0IC8gQllURVNfUEVSX0ZMT0FUNjQgKyBpbmRleCkgfCAwKTtcbiAgfVxuXG4gIC8qKiBDb3BpZXMgYSBtYW5hZ2VkIGFycmF5IHRvIHRoaXMuICovXG4gIHB1YmxpYyBjb3B5KGZyb206IE1hbmFnZWRGbG9hdDY0QXJyYXksIG9mZnNldCA9IDAsIGxlbmd0aCA9IE1hdGgubWluKGZyb20ubGVuZ3RoLCB0aGlzLmxlbmd0aCAtIG9mZnNldCkpIHtcbiAgICBjb25zdCBzdGFydCA9IChmcm9tLmJ5dGVPZmZzZXQgLyBCWVRFU19QRVJfRkxPQVQ2NCkgfCAwO1xuICAgIGdldE1lbW9yeVZpZXcoKS5jb3B5V2l0aGluKCh0aGlzLmJ5dGVPZmZzZXQgLyBCWVRFU19QRVJfRkxPQVQ2NCArIG9mZnNldCkgfCAwLCBzdGFydCwgc3RhcnQgKyBsZW5ndGgpO1xuICB9XG5cbiAgLyoqIENvcGllcyBhbiBhcnJheSB0byB0aGlzLiAqL1xuICBwdWJsaWMgc2V0KGFycmF5OiBBcnJheUxpa2U8bnVtYmVyPiwgb2Zmc2V0ID0gMCkge1xuICAgIGdldE1lbW9yeVZpZXcoKS5zZXQoYXJyYXksICh0aGlzLmJ5dGVPZmZzZXQgLyBCWVRFU19QRVJfRkxPQVQ2NCArIG9mZnNldCkgfCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBmcmVlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmJ5dGVPZmZzZXQgPiAwKSB7XG4gICAgICBmcmVlKHRoaXMuYnl0ZU9mZnNldCwgdGhpcy5sZW5ndGgpO1xuICAgICAgdW5yZWdpc3Rlcih0aGlzKTtcbiAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IC1JbmZpbml0eTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IGJ1ZmZlcigpOiBBcnJheUJ1ZmZlckxpa2Uge1xuICAgIHJldHVybiBtZW1vcnkuYnVmZmVyO1xuICB9XG5cbiAgcHVibGljIGdldCBieXRlTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoICogQllURVNfUEVSX0ZMT0FUNjQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXQgPiAwO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGxlbmd0aDogTjtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBU0EsSUFBSSxDQUFFQyxNQUFNLEtBQVEscUJBQXFCLENBRWxELEtBQU0sQ0FBQUMsaUJBQWlCLENBQUcsQ0FBQyxDQUUzQixLQUFNLENBQUFDLFFBQVEsQ0FBR0MsTUFBTSxDQUFDQyxvQkFBb0IsRUFDMUMsR0FBSSxDQUFBQSxvQkFBb0IsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBRUMsSUFBSSxDQUFtQixHQUFLUCxJQUFJLENBQUNNLEdBQUcsQ0FBRUMsSUFBSSxDQUFDLENBQUMsQ0FFOUUsUUFBUyxDQUFBQyxRQUFRQSxDQUFDQyxHQUFzQixDQUFRLENBQzlDTixRQUFRLEVBQUVLLFFBQVEsQ0FBQ0MsR0FBRyxDQUFFLENBQUNBLEdBQUcsQ0FBQ0MsVUFBVSxDQUFFRCxHQUFHLENBQUNFLE1BQU0sQ0FBQyxDQUFFRixHQUFHLENBQzNELENBRUEsUUFBUyxDQUFBRyxVQUFVQSxDQUFDSCxHQUFzQixDQUFRLENBQ2hETixRQUFRLEVBQUVTLFVB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