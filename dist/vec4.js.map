{"version":3,"sources":["../assembly/vec4.ts"],"names":["array","v","create","x","y","z","w","set","fromVec3","out","copy","add","a","b","sub","scale","s","mul","mmul","dot","lerp","t","len2","len","Math","sqrt","norm"],"mappings":"MACO,GAAKA,CAAAA,K,kBAGZ,KAAMC,CAAAA,CAAO,CAAGC,MAAM,EAAtB,CAUA,MAAO,SAASA,CAAAA,MAAT,CAAgBC,CAAQ,CAAG,CAA3B,CAA8BC,CAAQ,CAAG,CAAzC,CAA4CC,CAAQ,CAAG,CAAvD,CAA0DC,CAAQ,CAAG,CAArE,CAA8E,CACnF,MAAO,CAACH,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CACR,CAWA,MAAO,SAASC,CAAAA,GAAT,CAAaN,CAAb,CAAsBE,CAAQ,CAAG,CAAjC,CAAoCC,CAAQ,CAAG,CAA/C,CAAkDC,CAAQ,CAAG,CAA7D,CAAgEC,CAAQ,CAAG,CAA3E,CAAoF,CAChFL,CAAC,CAAC,CAAD,CAAD,CAAOE,CAAjB,CACUF,CAAC,CAAC,CAAD,CAAD,CAAOG,CAAjB,CACUH,CAAC,CAAC,CAAD,CAAD,CAAOI,CAAjB,CACUJ,CAAC,CAAC,CAAD,CAAD,CAAOK,CAAjB,CACA,MAAOL,CAAAA,CACR,CAQD,MAAO,SAASO,CAAAA,QAAT,CAAkBP,CAAlB,CAAmCQ,GAAS,CAAGP,MAAM,EAArD,CAA+D,CAC1DO,GAAG,CAAC,CAAD,CAAH,CAASR,CAAC,CAAC,CAAD,CAApB,CACUQ,GAAG,CAAC,CAAD,CAAH,CAASR,CAAC,CAAC,CAAD,CAApB,CACUQ,GAAG,CAAC,CAAD,CAAH,CAASR,CAAC,CAAC,CAAD,CAApB,CACUQ,GAAG,CAAC,CAAD,CAAH,CAAS,CAAnB,CACA,MAAOA,CAAAA,GACR,CAMD,MAAO,SAASC,CAAAA,IAAT,CAAcT,CAAd,CAA+BQ,GAAS,CAAGP,MAAM,EAAjD,CAA2D,CAChE,MAAOF,CAAAA,KAAK,CAACU,IAAN,CAAWT,CAAX,CAAcQ,GAAd,CACR,CAMD,MAAO,SAASE,CAAAA,GAAT,CAAaC,CAAb,CAA8BC,CAA9B,CAA+CJ,GAAS,CAAGP,MAAM,EAAjE,CAA2E,CAChF,MAAOF,CAAAA,KAAK,CAACW,GAAN,CAAUC,CAAV,CAAaC,CAAb,CAAgBJ,GAAhB,CACR,CAMD,MAAO,SAASK,CAAAA,GAAT,CAAaF,CAAb,CAA8BC,CAA9B,CAA+CJ,GAAS,CAAGP,MAAM,EAAjE,CAA2E,CAChF,MAAOF,CAAAA,KAAK,CAACc,GAAN,CAAUF,CAAV,CAAaC,CAAb,CAAgBJ,GAAhB,CACR,CAMD,MAAO,SAASM,CAAAA,KAAT,CAAed,CAAf,CAAgCe,CAAhC,CAA0CP,GAAS,CAAGP,MAAM,EAA5D,CAAsE,CAC3E,MAAOF,CAAAA,KAAK,CAACe,KAAN,CAAYd,CAAZ,CAAee,CAAf,CAAkBP,GAAlB,CACR,CAMD,MAAO,SAASQ,CAAAA,GAAT,CAAahB,CAAb,CAA8Be,CAA9B,CAA+CP,GAAS,CAAGP,MAAM,EAAjE,CAA2E,CAChF,MAAOF,CAAAA,KAAK,CAACiB,GAAN,CAAUhB,CAAV,CAAae,CAAb,CAAgBP,GAAhB,CACR,CAMD,MAAO,SAASS,CAAAA,IAAT,CAAcN,CAAd,CAA+BC,CAA/B,CAAgDJ,GAAS,CAAGP,MAAM,EAAlE,CAA4E,CACjF,MAAOF,CAAAA,KAAK,CAACU,IAAN,CAAWV,KAAK,CAACkB,IAAN,CAAW,CAAX,CAAcN,CAAd,CAAiBC,CAAjB,CAAoBZ,CAApB,CAAX,CAAmCQ,GAAnC,CACR,CAMD,MAAO,SAASU,CAAAA,GAAT,CAAaP,CAAb,CAA8BC,CAA9B,CAAsD,CAC3D,MAAOb,CAAAA,KAAK,CAACmB,GAAN,CAAUP,CAAV,CAAaC,CAAb,CACR,CAMD,MAAO,SAASO,CAAAA,IAAT,CAAcR,CAAd,CAA+BC,CAA/B,CAAgDQ,CAAhD,CAA0DZ,GAAS,CAAGP,MAAM,EAA5E,CAAsF,CAC3F,MAAOF,CAAAA,KAAK,CAACoB,IAAN,CAAWR,CAAX,CAAcC,CAAd,CAAiBQ,CAAjB,CAAoBZ,GAApB,CACR,CAMD,MAAO,SAASa,CAAAA,IAAT,CAAcrB,CAAd,CAAsC,CAC3C,MAAOkB,CAAAA,GAAG,CAAClB,CAAD,CAAIA,CAAJ,CACX,CAMD,MAAO,SAASsB,CAAAA,GAAT,CAAatB,CAAb,CAAqC,CAC1C,MAAOuB,CAAAA,IAAI,CAACC,IAAL,CAAUN,GAAG,CAAClB,CAAD,CAAIA,CAAJ,CAAb,CACR,CAMD,MAAO,SAASyB,CAAAA,IAAT,CAAczB,CAAd,CAA+BQ,GAAS,CAAGP,MAAM,EAAjD,CAA2D,CAChE,MAAOF,CAAAA,KAAK,CAACe,KAAN,CAAYd,CAAZ,CAAe,GAAKsB,GAAG,CAACtB,CAAD,CAAH,EAAU,CAAf,CAAf,CAAkCQ,GAAlC,CACR","sourcesContent":["import { Float, ReadonlyMat4, ReadonlyVec3, ReadonlyVec4, Vec4 } from './types';\r\nimport * as array from './array';\r\n\r\n// Temp variables\r\nconst v: Vec4 = create();\r\n\r\n/**\r\n * Create a new {@link Vec4}.\r\n * @param x defaults to 0\r\n * @param y defaults to 0\r\n * @param z defaults to 0\r\n * @param w defaults to 0\r\n * @returns [x, y, z, w]\r\n */\r\nexport function create(x: Float = 0, y: Float = 0, z: Float = 0, w: Float = 0): Vec4 {\r\n  return [x, y, z, w];\r\n}\r\n\r\n/**\r\n * Set values of a {@link Vec4}.\r\n * @param v the vec\r\n * @param x defaults to 0\r\n * @param y defaults to 0\r\n * @param z defaults to 0\r\n * @param w defaults to 0\r\n * @returns v\r\n */\r\n export function set(v: Vec4, x: Float = 0, y: Float = 0, z: Float = 0, w: Float = 0): Vec4 {\r\n  unchecked(v[0] = x);\r\n  unchecked(v[1] = y);\r\n  unchecked(v[2] = z);\r\n  unchecked(v[3] = w);\r\n  return v;\r\n}\r\n\r\n/**\r\n * Create a {@link Vec4} from {@link ReadonlyVec3}.\r\n * @param v Vec3\r\n * @param out output Vec4\r\n * @returns [v[0], v[1], v[2], w]\r\n */\r\nexport function fromVec3(v: ReadonlyVec3, out: Vec4 = create()): Vec4 {\r\n  unchecked(out[0] = v[0]);\r\n  unchecked(out[1] = v[1]);\r\n  unchecked(out[2] = v[2]);\r\n  unchecked(out[3] = 0);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy a {@link Vec4}.\r\n * @returns out\r\n */\r\nexport function copy(v: ReadonlyVec4, out: Vec4 = create()): Vec4 {\r\n  return array.copy(v, out) as Vec4;\r\n}\r\n\r\n/**\r\n * Sum 2 {@link Vec4}.\r\n * @returns out = a + b\r\n */\r\nexport function add(a: ReadonlyVec4, b: ReadonlyVec4, out: Vec4 = create()): Vec4 {\r\n  return array.add(a, b, out) as Vec4;\r\n}\r\n\r\n/**\r\n * Subtract 2 {@link Vec4}.\r\n * @returns out = a - b\r\n */\r\nexport function sub(a: ReadonlyVec4, b: ReadonlyVec4, out: Vec4 = create()): Vec4 {\r\n  return array.sub(a, b, out) as Vec4;\r\n}\r\n\r\n/**\r\n * Multiply a {@link Vec4} by a constant.\r\n * @returns out = s * v\r\n */\r\nexport function scale(v: ReadonlyVec4, s: Float, out: Vec4 = create()): Vec4 {\r\n  return array.scale(v, s, out) as Vec4;\r\n}\r\n\r\n/**\r\n * Multiply 2 {@link Vec4} element-wise.\r\n * @returns out = a * b\r\n */\r\nexport function mul(v: ReadonlyVec4, s: ReadonlyVec4, out: Vec4 = create()): Vec4 {\r\n  return array.mul(v, s, out) as Vec4;\r\n}\r\n\r\n/**\r\n * Multiply a {@link ReadonlyMat4} with a {@link Vec4}.\r\n * @returns out = m * v\r\n */\r\nexport function mmul(a: ReadonlyMat4, b: ReadonlyVec4, out: Vec4 = create()): Vec4 {\r\n  return array.copy(array.mmul(4, a, b, v), out) as Vec4;\r\n}\r\n\r\n/**\r\n * Calculate the dot product of 2 {@link Vec4}.\r\n * @returns a * b\r\n */\r\nexport function dot(a: ReadonlyVec4, b: ReadonlyVec4): Float {\r\n  return array.dot(a, b);\r\n}\r\n\r\n/**\r\n * Linear interpolate 2 {@link Vec4}.\r\n * @returns out = lerp(a, b, t)\r\n */\r\nexport function lerp(a: ReadonlyVec4, b: ReadonlyVec4, t: Float, out: Vec4 = create()): Vec4 {\r\n  return array.lerp(a, b, t, out) as Vec4;\r\n}\r\n\r\n/**\r\n * Calculate squared length of a {@link Vec4}.\r\n * @returns dot(v, v)\r\n */\r\nexport function len2(v: ReadonlyVec4): Float {\r\n  return dot(v, v);\r\n}\r\n\r\n/**\r\n * Calculate length of a {@link Vec4}.\r\n * @returns |v|\r\n */\r\nexport function len(v: ReadonlyVec4): Float {\r\n  return Math.sqrt(dot(v, v)) as Float;\r\n}\r\n\r\n/**\r\n * Normalize a {@link Vec4} and optionally stores result to the out param.\r\n * @returns v/|v|\r\n */\r\nexport function norm(v: ReadonlyVec4, out: Vec4 = create()): Vec4 {\r\n  return array.scale(v, 1 / (len(v) || 1), out) as Vec4;\r\n}\r\n"],"file":"vec4.js"}