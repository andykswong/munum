{"version":3,"file":"index.d.js","names":[],"sources":["../../assembly/types/index.d.ts"],"sourcesContent":["/**\n * munum array type definitions that are dependent on platform (number array for TS; StaticArray<f32> for AS).\n * @packageDocumentation\n */\n\n/**\n * The integer number type.\n */\nexport type Int = number;\n\n/**\n * The floating point number type.\n */\nexport type Float = number;\n\n/**\n * A vector of floats.\n */\nexport interface Vec {\n  [key: number]: Float;\n  readonly length: number;\n}\n\n/**\n * A readonly vector of floats.\n */\nexport interface ReadonlyVec {\n  readonly [key: number]: Float;\n  readonly length: number;\n}\n\n/**\n * A 2D vector.\n */\nexport type Vec2 = [x: Float, y: Float];\n\n/**\n * A 3D vector.\n */\nexport type Vec3 = [x: Float, y: Float, z: Float];\n\n/**\n * A 4D vector.\n */\nexport type Vec4 = [x: Float, y: Float, z: Float, w: Float];\n\n/**\n * A read-only 2D vector.\n */\nexport type ReadonlyVec2 = Readonly<Vec2>;\n\n/**\n * A read-only 3D vector.\n */\nexport type ReadonlyVec3 = Readonly<Vec3>;\n\n/**\n * A read-only 4D vector.\n */\nexport type ReadonlyVec4 = Readonly<Vec4>;\n\n/**\n * A column-major 2x2 Matrix.\n */\nexport type Mat2 = [\n  m11: number, m21: number,\n  m12: number, m22: number\n];\n\n/**\n * A column-major 3x3 Matrix.\n */\nexport type Mat3 = [\n  m11: number, m21: number, m31: number,\n  m12: number, m22: number, m32: number,\n  m13: number, m23: number, m33: number\n];\n\n/**\n * Column-major 4x4 Matrix.\n */\nexport type Mat4 = [\n  m11: number, m21: number, m31: number, m41: number,\n  m12: number, m22: number, m32: number, m42: number,\n  m13: number, m23: number, m33: number, m43: number,\n  m14: number, m24: number, m34: number, m44: number,\n];\n\n/**\n * A read-only 2x2 matrix.\n */\nexport type ReadonlyMat2 = Readonly<Mat2>;\n\n/**\n * A read-only 3x3 matrix.\n */\nexport type ReadonlyMat3 = Readonly<Mat3>;\n\n/**\n * A read-only 4x4 matrix.\n */\nexport type ReadonlyMat4 = Readonly<Mat4>;\n\n/**\n * Quaternion of the form w + x * i + y * j + z * k, stored as {@link Vec4}.\n */\nexport type Quat = Vec4;\n\n/**\n * A read-only quaternion.\n */\nexport type ReadonlyQuat = ReadonlyVec4;\n\n/**\n * Plane of the form ax + by + cz + d = 0, where (a, b, c) is the normal.\n */\nexport type Plane = Vec4;\n\n/**\n * A read-only plane.\n */\nexport type ReadonlyPlane = ReadonlyVec4;\n\n/**\n * A frustum defined by 6 normalized planes: left, right, bottom, top, near, far.\n * The normal of planes should point inside the frustum.\n */\nexport type Frustum = readonly [\n  left: Plane,\n  right: Plane,\n  bottom: Plane,\n  top: Plane,\n  near: Plane,\n  far: Plane,\n];\n\n/**\n * A read-only frustum.\n */\nexport type ReadonlyFrustum = readonly [\n  left: ReadonlyPlane,\n  right: ReadonlyPlane,\n  bottom: ReadonlyPlane,\n  top: ReadonlyPlane,\n  near: ReadonlyPlane,\n  far: ReadonlyPlane,\n];\n\n/**\n * A read-only axis-aligned bounding box.\n */\nexport interface ReadonlyAABB {\n  /**\n   * The minimum point.\n   */\n  readonly min: ReadonlyVec3;\n\n  /**\n   * The maximum point.\n   */\n  readonly max: ReadonlyVec3;\n}\n\n/**\n * An axis-aligned bounding box.\n */\nexport declare class AABB implements ReadonlyAABB {\n  public readonly min: Vec3;\n  public readonly max: Vec3;\n\n  /**\n   * Constructor.\n   *\n   * @param min The minimum point.\n   * @param max The maximum point.\n   */\n  public constructor(min: Vec3, max: Vec3);\n}\n"],"mappings":""}