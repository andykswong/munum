{"version":3,"sources":["../assembly/plane.ts"],"names":["array","vec3","vec4","v1","create","v2","copy","set","fromPointNormal","point","normal","out","norm","dot","fromPoints","a","b","c","cross","sub","p","scale","Math","sqrt","dist","q"],"mappings":"MACO,GAAKA,CAAAA,K,wBACL,GAAKC,CAAAA,I,uBACL,GAAKC,CAAAA,I,iBAGZ,KAAMC,CAAAA,EAAQ,CAAGF,IAAI,CAACG,MAAL,EAAjB,CACA,KAAMC,CAAAA,EAAQ,CAAGJ,IAAI,CAACG,MAAL,EAAjB,C,OAESA,M,CAAQE,I,CAAMC,G,iBAMvB,MAAO,SAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAA8CC,MAA9C,CAAoEC,GAAU,CAAGT,IAAI,CAACE,MAAL,EAAjF,CAAuG,CAC5GH,IAAI,CAACW,IAAL,CAAUF,MAAV,CAAkBP,EAAlB,EACUQ,GAAG,CAAC,CAAD,CAAH,CAAS,CAACV,IAAI,CAACY,GAAL,CAASV,EAAT,CAAaM,KAAb,CAApB,CACA,MAAOT,CAAAA,KAAK,CAACM,IAAN,CAAWH,EAAX,CAAeQ,GAAf,CACR,CAOD,MAAO,SAASG,CAAAA,UAAT,CAAoBC,CAApB,CAAqCC,CAArC,CAAsDC,CAAtD,CAAuEN,GAAU,CAAGT,IAAI,CAACE,MAAL,EAApF,CAA0G,CAC/G,MAAOI,CAAAA,eAAe,CAACO,CAAD,CAAId,IAAI,CAACiB,KAAL,CAAWjB,IAAI,CAACkB,GAAL,CAASH,CAAT,CAAYD,CAAZ,CAAeZ,EAAf,CAAX,CAA+BF,IAAI,CAACkB,GAAL,CAASF,CAAT,CAAYF,CAAZ,CAAeV,EAAf,CAA/B,CAAmDA,EAAnD,CAAJ,CAA4DM,GAA5D,CACvB,CAMD,MAAO,SAASC,CAAAA,IAAT,CAAcQ,CAAd,CAAgCT,GAAU,CAAGT,IAAI,CAACE,MAAL,EAA7C,CAAmE,CACxE,MAAiBF,CAAAA,IAAI,CAACmB,KAAL,CAAWD,CAAX,CAAc,GAAME,IAAI,CAACC,IAAL,CAAUH,CAAC,CAAC,CAAD,CAAD,CAAOA,CAAC,CAAC,CAAD,CAAR,CAAcA,CAAC,CAAC,CAAD,CAAD,CAAOA,CAAC,CAAC,CAAD,CAAtB,CAA4BA,CAAC,CAAC,CAAD,CAAD,CAAOA,CAAC,CAAC,CAAD,CAA9C,CAAD,EAAiE,CAAtE,CAAd,CAAwFT,GAAxF,CAClB,CAOD,MAAO,SAASa,CAAAA,IAAT,CAAcJ,CAAd,CAAgCK,CAAhC,CAAwD,CAC7D,MAAiBL,CAAAA,CAAC,CAAC,CAAD,CAAD,CAAOK,CAAC,CAAC,CAAD,CAAR,CAAcL,CAAC,CAAC,CAAD,CAAD,CAAOK,CAAC,CAAC,CAAD,CAAtB,CAA4BL,CAAC,CAAC,CAAD,CAAD,CAAOK,CAAC,CAAC,CAAD,CAApC,CAA0CL,CAAC,CAAC,CAAD,CAC7D","sourcesContent":["import { Float, Plane, ReadonlyPlane, ReadonlyVec3, Vec3 } from './types';\r\nimport * as array from './array';\r\nimport * as vec3 from './vec3';\r\nimport * as vec4 from './vec4';\r\n\r\n// Temp variables\r\nconst v1: Vec3 = vec3.create();\r\nconst v2: Vec3 = vec3.create();\r\n\r\nexport { create, copy, set } from './vec4';\r\n\r\n/**\r\n * Build a normalized {@link Plane} from a normal and a point on plane.\r\n * Normalized plane has len(a, b, c) = 1.\r\n */\r\nexport function fromPointNormal(point: ReadonlyVec3, normal: ReadonlyVec3, out: Plane = vec4.create()): Plane {\r\n  vec3.norm(normal, v1);\r\n  unchecked(out[3] = -vec3.dot(v1, point));\r\n  return array.copy(v1, out) as Plane;\r\n}\r\n\r\n/**\r\n * Build a normalized {@link Plane} from 3 points on plane.\r\n * The counter-clockwise face of triangle formed by a, b, c is considered the front face of the plane.\r\n * Normalized plane has len(a, b, c) = 1.\r\n */\r\nexport function fromPoints(a: ReadonlyVec3, b: ReadonlyVec3, c: ReadonlyVec3, out: Plane = vec4.create()): Plane {\r\n  return fromPointNormal(a, vec3.cross(vec3.sub(b, a, v1), vec3.sub(c, a, v2), v2), out);\r\n}\r\n\r\n/**\r\n * Normalize a {@link Plane} equation for correct distance calculation.\r\n * Normalized plane has len(a, b, c) = 1.\r\n */\r\nexport function norm(p: ReadonlyPlane, out: Plane = vec4.create()): Plane {\r\n  return unchecked(vec4.scale(p, 1 / ((Math.sqrt(p[0] * p[0] + p[1] * p[1] + p[2] * p[2]) as Float) || 1), out));\r\n}\r\n\r\n/**\r\n * Calculates the shortest signed distance from the given point q to a normalized {@link Plane} p.\r\n * Positive if q is on the same side of the plane as the plane normal; negative if it is on the opposite side.\r\n * Normalized plane has len(a, b, c) = 1.\r\n */\r\nexport function dist(p: ReadonlyPlane, q: ReadonlyVec3): Float {\r\n  return unchecked(p[0] * q[0] + p[1] * q[1] + p[2] * q[2] + p[3]);\r\n}\r\n"],"file":"plane.js"}