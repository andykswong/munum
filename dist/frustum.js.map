{"version":3,"sources":["../assembly/frustum.ts"],"names":["vec3","plane","FRUSTUM_PLANES","v0","create","left","right","bottom","top","near","far","copy","a","out","i","fromViewProj","m","set","norm","containsPoint","f","center","radius","dist","containsAABB","box","max","min"],"mappings":"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","sourcesContent":["import {\r\n  Float, Frustum, Plane, ReadonlyAABB, ReadonlyFrustum, ReadonlyMat4, ReadonlyVec3, Vec3\r\n} from './types';\r\nimport * as vec3 from './vec3';\r\nimport * as plane from './plane';\r\n\r\nconst FRUSTUM_PLANES = 6;\r\n\r\n// Temp variables\r\nconst v0: Vec3 = vec3.create();\r\n\r\n/**\r\n * Create a new {@link Frustum} from the 6 normalized planes: left, right, bottom, top, near, far.\r\n */\r\nexport function create(\r\n  left: Plane = plane.create(), right: Plane = plane.create(),\r\n  bottom: Plane = plane.create(), top: Plane = plane.create(),\r\n  near: Plane = plane.create(), far: Plane = plane.create()\r\n): Frustum {\r\n  return [left, right, bottom, top, near, far];\r\n}\r\n\r\n/**\r\n * Copy a {@link Frustum}.\r\n */\r\n export function copy(a: ReadonlyFrustum, out: Frustum = create()): Frustum {\r\n  for (let i = 0; i < FRUSTUM_PLANES; ++i) {\r\n    plane.copy(a[i], out[i]);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Build a {@link Frustum} in world space from a view-projection matrix (viewProj = proj * view) using Gribb/Hartmann method.\r\n * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\r\n */\r\nexport function fromViewProj(m: ReadonlyMat4, out: Frustum = create()): Frustum {\r\n  unchecked(plane.set(out[0], m[3] + m[0], m[7] + m[4], m[11] + m[8], m[15] + m[12])); // left\r\n  unchecked(plane.set(out[1], m[3] - m[0], m[7] - m[4], m[11] - m[8], m[15] - m[12])); // right\r\n\r\n  unchecked(plane.set(out[2], m[3] + m[1], m[7] + m[5], m[11] + m[9], m[15] + m[13])); // bottom\r\n  unchecked(plane.set(out[3], m[3] - m[1], m[7] - m[5], m[11] - m[9], m[15] - m[13])); // top\r\n\r\n  unchecked(plane.set(out[4], m[3] + m[2], m[7] + m[6], m[11] + m[10], m[15] + m[14])); // near\r\n  unchecked(plane.set(out[5], m[3] - m[2], m[7] - m[6], m[11] - m[10], m[15] - m[14])); // far\r\n\r\n  for (let i = 0; i < FRUSTUM_PLANES; ++i) {  // normalize all planes\r\n    plane.norm(out[i], out[i]);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Checks whether the given point / sphere defined by center and radius intersects with given {@link ReadonlyFrustum}.\r\n */\r\nexport function containsPoint(f: ReadonlyFrustum, center: ReadonlyVec3, radius: Float = 0): boolean {\r\n  // Check the distance of the center to the planes\r\n  // Point is outside frustum if it falls into the negative half-space of any plane\r\n  for (let i = 0; i < FRUSTUM_PLANES; ++i) {\r\n    if (plane.dist(f[i], center) < -radius) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Checks whether the given {@link AABB} intersects with given {@link ReadonlyFrustum}.\r\n */\r\nexport function containsAABB(f: ReadonlyFrustum, box: ReadonlyAABB): boolean {\r\n  for (let i = 0; i < FRUSTUM_PLANES; ++i) {\r\n    // Find the corner at max distance\r\n    unchecked(v0[0] = (f[i][0] > 0) ? box.max[0] : box.min[0]);\r\n    unchecked(v0[1] = (f[i][1] > 0) ? box.max[1] : box.min[1]);\r\n    unchecked(v0[2] = (f[i][2] > 0) ? box.max[2] : box.min[2]);\r\n    if (plane.dist(f[i], v0) < 0) { // max point is still outside the plane\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"],"file":"frustum.js"}