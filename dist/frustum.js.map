{"version":3,"sources":["../assembly/frustum.ts"],"names":["vec3","plane","v0","create","fromViewProj","m","f","i","length","norm","containsPoint","center","radius","dist","containsAABB","box","max","min"],"mappings":"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","sourcesContent":["import {\r\n  Float, Frustum, ReadonlyAABB, ReadonlyFrustum, ReadonlyMat4, ReadonlyVec3, Vec3\r\n} from './types';\r\nimport * as vec3 from './vec3';\r\nimport * as plane from './plane';\r\n\r\n// Temp variables\r\nconst v0: Vec3 = vec3.create();\r\n\r\n/**\r\n * Build a {@link Frustum} in world space from a view-projection matrix (viewProj = proj * view) using Gribb/Hartmann method.\r\n * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\r\n */\r\nexport function fromViewProj(m: ReadonlyMat4): Frustum {\r\n  const f: Frustum = [\r\n    unchecked([m[3] + m[0], m[7] + m[4], m[11] + m[8], m[15] + m[12]]), // left\r\n    unchecked([m[3] - m[0], m[7] - m[4], m[11] - m[8], m[15] - m[12]]), // right\r\n    unchecked([m[3] + m[1], m[7] + m[5], m[11] + m[9], m[15] + m[13]]), // bottom\r\n    unchecked([m[3] - m[1], m[7] - m[5], m[11] - m[9], m[15] - m[13]]), // top\r\n    unchecked([m[3] + m[2], m[7] + m[6], m[11] + m[10], m[15] + m[14]]), // near\r\n    unchecked([m[3] - m[2], m[7] - m[6], m[11] - m[10], m[15] - m[14]]) // far\r\n  ];\r\n\r\n  for (let i = 0; i < f.length; ++i) {  // normalize all planes\r\n    plane.norm(f[i], f[i]);\r\n  }\r\n\r\n  return f;\r\n}\r\n\r\n/**\r\n * Checks whether the given point / sphere defined by center and radius is inside a {@link ReadonlyFrustum}.\r\n */\r\nexport function containsPoint(f: ReadonlyFrustum, center: ReadonlyVec3, radius: Float = 0): boolean {\r\n  // Check the distance of the center to the planes\r\n  // Point is outside frustum if it falls into the negative half-space of any plane\r\n  for (let i = 0; i < f.length; ++i) {\r\n    if (plane.dist(f[i], center) < radius) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Checks whether the given {@link AABB} is inside given {@link ReadonlyFrustum}.\r\n */\r\nexport function containsAABB(f: ReadonlyFrustum, box: ReadonlyAABB): boolean {\r\n  for (let i = 0; i < f.length; ++i) {\r\n    // Find the corner at max distance\r\n    unchecked(v0[0] = (f[i][0] > 0) ? box.max[0] : box.min[0]);\r\n    unchecked(v0[1] = (f[i][1] > 0) ? box.max[1] : box.min[1]);\r\n    unchecked(v0[2] = (f[i][2] > 0) ? box.max[2] : box.min[2]);\r\n    if (plane.dist(f[i], v0) < 0) { // max point is still outside the plane\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"],"file":"frustum.js"}