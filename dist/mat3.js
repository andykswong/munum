import*as array from"./array.js";const m=create();export function create(){return[1,0,0,0,1,0,0,0,1]}export function id(out){for(let i=0;i<9;++i){out[i]=i%4?0:1}return out}export function copy(v,out=create()){return array.copy(v,out)}export function add(a,b,out=create()){return array.add(a,b,out)}export function sub(a,b,out=create()){return array.sub(a,b,out)}export function scale(m,s,out=create()){return array.scale(m,s,out)}export function tr(m,out=create()){return array.tr(3,m,out)}export function mul(a,b,out=create()){return array.copy(array.mmul(3,a,b,m),out)}export function det(m){return m[0]*+(m[4]*m[8]-m[7]*m[5])+m[3]*-(m[1]*m[8]-m[7]*m[2])+m[6]*+(m[1]*m[5]-m[4]*m[2])}export function invert(a,out=create()){const detA=det(a);if(!detA){return null}m[0]=+(a[4]*a[8]-a[7]*a[5]);m[1]=-(a[1]*a[8]-a[7]*a[2]);m[2]=+(a[1]*a[5]-a[4]*a[2]);m[3]=-(a[3]*a[8]-a[6]*a[5]);m[4]=+(a[0]*a[8]-a[6]*a[2]);m[5]=-(a[0]*a[5]-a[3]*a[2]);m[6]=+(a[3]*a[7]-a[6]*a[4]);m[7]=-(a[0]*a[7]-a[6]*a[1]);m[8]=+(a[0]*a[4]-a[3]*a[1]);return scale(m,1/detA,out)}export function nmat(a,out=create()){if(!invert(a,out)){return null}return tr(out,out)}
//# sourceMappingURL=mat3.js.map