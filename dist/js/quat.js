function _usingCtx2(){var r="function"==typeof SuppressedError?SuppressedError:function(r,n){var e=new Error;return e.name="SuppressedError",e.suppressed=n,e.error=r,e},n={},e=[];function using(r,n){if(null!=n){if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==o&&(o=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof o)throw new TypeError("Property [Symbol.dispose] is not a function.");e.push({v:n,d:o,a:r})}return n}return{e:n,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o=this.e;function next(){for(;r=e.pop();)try{var r,t=r.d.call(r.v);if(r.a)return Promise.resolve(t).then(next,err)}catch(r){return err(r)}if(o!==n)throw o}function err(e){return o=o!==n?new r(o,e):e,next()}return next()}}}import{EPSILON,fequal}from"../scalar.js";import{dot,normalize}from"./helpers.js";import{BYTES_PER_FLOAT64,ManagedFloat64Array,memoryManager}from"./memory.js";import{Vec3}from"./vec.js";const ID=[0,0,0,1];export class Quat extends ManagedFloat64Array{static identity(){const q=new Quat(memoryManager.create(4));q.set(ID);return q}static fromUnitVecs(from,to){try{var _usingCtx=_usingCtx2();const dot=from.dot(to);if(fequal(dot,-1))try{var _usingCtx3=_usingCtx2();const[,y,z]=from;const v=_usingCtx3.u(new Vec3(0,z,-y));return Quat.fromAxisAngle(v,Math.PI)}catch(_){_usingCtx3.e=_}finally{_usingCtx3.d()}else if(fequal(dot,1)){return Quat.identity()}const v=_usingCtx.u(new Vec3);v.copy(from,0,0,3);v.cross(to);const q=new Quat(memoryManager.create(4));q.set([...v,1+dot]);q.normalize();return q}catch(_){_usingCtx.e=_}finally{_usingCtx.d()}}static fromAxisAngle(axis,angle){const view=memoryManager.view;const ptr=axis.byteOffset/BYTES_PER_FLOAT64;const sinHalf=Math.sin(angle/2);const q=new Quat(memoryManager.create(4));q.set([view[ptr+0]*sinHalf,view[ptr+1]*sinHalf,view[ptr+2]*sinHalf,Math.cos(angle/2)]);return q}static fromAngleX(angle){const q=new Quat(memoryManager.create(4));q.set([Math.sin(angle/2),0,0,Math.cos(angle/2)]);return q}static fromAngleY(angle){const q=new Quat(memoryManager.create(4));q.set([0,Math.sin(angle/2),0,Math.cos(angle/2)]);return q}static fromAngleZ(angle){const q=new Quat(memoryManager.create(4));q.set([0,0,Math.sin(angle/2),Math.cos(angle/2)]);return q}constructor(ptr){super(ptr)}get length(){return 4}mul(rhs){const left=this.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;const x=view[left+3]*view[right+0]+view[left+0]*view[right+3]+view[left+1]*view[right+2]-view[left+2]*view[right+1];const y=view[left+3]*view[right+1]+view[left+1]*view[right+3]+view[left+2]*view[right+0]-view[left+0]*view[right+2];const z=view[left+3]*view[right+2]+view[left+2]*view[right+3]+view[left+0]*view[right+1]-view[left+1]*view[right+0];const w=view[left+3]*view[right+3]-view[left+0]*view[right+0]-view[left+1]*view[right+1]-view[left+2]*view[right+2];view[left+0]=x;view[left+1]=y;view[left+2]=z;view[left+3]=w;return this}rotate(v){try{var _usingCtx4=_usingCtx2();const view=memoryManager.view;const q1=_usingCtx4.u(new Quat(memoryManager.create(4)));const q2=_usingCtx4.u(new Quat(memoryManager.create(4)));q1.copy(this,0,0,4);q2.copy(v,0,0,3);view[q2.byteOffset/BYTES_PER_FLOAT64+3|0]=0;q1.mul(q2);q2.copy(this,0,0,4);q2.invert();q1.mul(q2);v.copy(q1,0,0,3);return v}catch(_){_usingCtx4.e=_}finally{_usingCtx4.d()}}dot(rhs){return dot(this,rhs)}lerp(rhs,t){const left=this.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;const cosTheta=dot(this,rhs);const magB=cosTheta<0?-1:1;for(let i=0;i<this.length;++i){view[left+i]=view[left+i]*(1-t)+view[right+i]*magB*t}normalize(this);return this}slerp(rhs,t){const left=this.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;let cosTheta=dot(this,rhs);let magB=1;if(cosTheta<0){cosTheta*=-1;magB=-1}let scale0=1-t;let scale1=t;if(1-cosTheta>EPSILON){const theta=Math.acos(cosTheta);const sinTheta=Math.sin(theta);scale0=Math.sin((1-t)*theta)/sinTheta;scale1=Math.sin(t*theta)/sinTheta}scale1*=magB;for(let i=0;i<this.length;++i){view[left+i]=view[left+i]*scale0+view[right+i]*scale1}return this}normalize(){return normalize(this)}invert(){const sqrLen=dot(this,this);if(sqrLen===0){return false}const left=this.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<3;++i){view[left+i]=-view[left+i]/sqrLen}view[left+3]/=sqrLen;return true}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFUFNJTE9OIiwiZmVxdWFsIiwiZG90Iiwibm9ybWFsaXplIiwiQllURVNfUEVSX0ZMT0FUNjQiLCJNYW5hZ2VkRmxvYXQ2NEFycmF5IiwibWVtb3J5TWFuYWdlciIsIlZlYzMiLCJJRCIsIlF1YXQiLCJpZGVudGl0eSIsInEiLCJjcmVhdGUiLCJzZXQiLCJmcm9tVW5pdFZlY3MiLCJmcm9tIiwidG8iLCJfdXNpbmdDdHgiLCJfdXNpbmdDdHgyIiwiX3VzaW5nQ3R4MyIsInkiLCJ6IiwidiIsInUiLCJmcm9tQXhpc0FuZ2xlIiwiTWF0aCIsIlBJIiwiXyIsImUiLCJkIiwiY29weSIsImNyb3NzIiwiYXhpcyIsImFuZ2xlIiwidmlldyIsInB0ciIsImJ5dGVPZmZzZXQiLCJzaW5IYWxmIiwic2luIiwiY29zIiwiZnJvbUFuZ2xlWCIsImZyb21BbmdsZVkiLCJmcm9tQW5nbGVaIiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJtdWwiLCJyaHMiLCJsZWZ0IiwicmlnaHQiLCJ4IiwidyIsInJvdGF0ZSIsIl91c2luZ0N0eDQiLCJxMSIsInEyIiwiaW52ZXJ0IiwibGVycCIsInQiLCJjb3NUaGV0YSIsIm1hZ0IiLCJpIiwic2xlcnAiLCJzY2FsZTAiLCJzY2FsZTEiLCJ0aGV0YSIsImFjb3MiLCJzaW5UaGV0YSIsInNxckxlbiJdLCJzb3VyY2VzIjpbIi4uLy4uL2pzL2pzL3F1YXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVBTSUxPTiwgZmVxdWFsIH0gZnJvbSAnLi4vc2NhbGFyLnRzJztcbmltcG9ydCB7IElRdWF0IH0gZnJvbSAnLi4vdHlwZXMudHMnO1xuaW1wb3J0IHsgZG90LCBub3JtYWxpemUgfSBmcm9tICcuL2hlbHBlcnMudHMnO1xuaW1wb3J0IHsgQllURVNfUEVSX0ZMT0FUNjQsIE1hbmFnZWRGbG9hdDY0QXJyYXksIG1lbW9yeU1hbmFnZXIgfSBmcm9tICcuL21lbW9yeS50cyc7XG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi92ZWMudHMnO1xuXG5jb25zdCBJRCA9IFswLCAwLCAwLCAxXTtcblxuLyoqIEEgcXVhdGVybmlvbi4gKi9cbmV4cG9ydCBjbGFzcyBRdWF0IGV4dGVuZHMgTWFuYWdlZEZsb2F0NjRBcnJheTw0PiBpbXBsZW1lbnRzIElRdWF0IHtcbiAgLyoqIFJldHVybiBhbiBpZGVudGl0eSBRdWF0LiAqL1xuICBwdWJsaWMgc3RhdGljIGlkZW50aXR5KCk6IFF1YXQge1xuICAgIGNvbnN0IHEgPSBuZXcgUXVhdChtZW1vcnlNYW5hZ2VyLmNyZWF0ZSg0KSk7XG4gICAgcS5zZXQoSUQpO1xuICAgIHJldHVybiBxO1xuICB9XG5cbiAgLyoqIFJldHVybiBhIFF1YXQgZnJvbSB1bml0IHZlY3RvcnMuICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVVuaXRWZWNzKGZyb206IFZlYzMsIHRvOiBWZWMzKTogUXVhdCB7XG4gICAgY29uc3QgZG90ID0gZnJvbS5kb3QodG8pO1xuXG4gICAgaWYgKGZlcXVhbChkb3QsIC0xKSkgeyAvLyB2ZWN0b3JzIGFyZSBpbiBwYXJhbGxlbCBidXQgb3Bwb3NpdGUgZGlyZWN0aW9uXG4gICAgICAvLyB1c2UgYXJiaXRyYXJ5IHBlcnBlbmRpY3VsYXIgdmVjdG9yID0gKDAsIHosIC15KVxuICAgICAgY29uc3QgWywgeSwgel0gPSBmcm9tO1xuICAgICAgdXNpbmcgdiA9IG5ldyBWZWMzKDAsIHosIC15KTtcbiAgICAgIHJldHVybiBRdWF0LmZyb21BeGlzQW5nbGUodiwgTWF0aC5QSSk7XG4gICAgfSBlbHNlIGlmIChmZXF1YWwoZG90LCAxKSkgeyAvLyB2ZWN0b3JzIGFyZSBpbiBzYW1lIGRpcmVjdGlvblxuICAgICAgcmV0dXJuIFF1YXQuaWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICB1c2luZyB2ID0gbmV3IFZlYzMoKTtcbiAgICB2LmNvcHkoZnJvbSwgMCwgMCwgMyk7XG4gICAgdi5jcm9zcyh0byk7XG5cbiAgICBjb25zdCBxID0gbmV3IFF1YXQobWVtb3J5TWFuYWdlci5jcmVhdGUoNCkpO1xuICAgIHEuc2V0KFsuLi52LCAxICsgZG90XSk7XG4gICAgcS5ub3JtYWxpemUoKTtcbiAgICByZXR1cm4gcTtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gYSBRdWF0IGZyb20gYXhpcyBhbmQgYW5nbGUgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQXhpc0FuZ2xlKGF4aXM6IFZlYzMsIGFuZ2xlOiBudW1iZXIpOiBRdWF0IHtcbiAgICBjb25zdCB2aWV3ID0gbWVtb3J5TWFuYWdlci52aWV3O1xuICAgIGNvbnN0IHB0ciA9IGF4aXMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0O1xuICAgIGNvbnN0IHNpbkhhbGYgPSBNYXRoLnNpbihhbmdsZSAvIDIpO1xuICAgIGNvbnN0IHEgPSBuZXcgUXVhdChtZW1vcnlNYW5hZ2VyLmNyZWF0ZSg0KSk7XG4gICAgcS5zZXQoW3ZpZXdbcHRyICsgMF0gKiBzaW5IYWxmLCB2aWV3W3B0ciArIDFdICogc2luSGFsZiwgdmlld1twdHIgKyAyXSAqIHNpbkhhbGYsIE1hdGguY29zKGFuZ2xlIC8gMildKTtcbiAgICByZXR1cm4gcTtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gYSBRdWF0IGZyb20gcm90YXRpb24gYXJvdW5kIHgtYXhpcy4gKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQW5nbGVYKGFuZ2xlOiBudW1iZXIpOiBRdWF0IHtcbiAgICBjb25zdCBxID0gbmV3IFF1YXQobWVtb3J5TWFuYWdlci5jcmVhdGUoNCkpO1xuICAgIHEuc2V0KFtNYXRoLnNpbihhbmdsZSAvIDIpLCAwLCAwLCBNYXRoLmNvcyhhbmdsZSAvIDIpXSk7XG4gICAgcmV0dXJuIHE7XG4gIH1cblxuICAvKiogUmV0dXJuIGEgUXVhdCBmcm9tIHJvdGF0aW9uIGFyb3VuZCB5LWF4aXMuICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFuZ2xlWShhbmdsZTogbnVtYmVyKTogUXVhdCB7XG4gICAgY29uc3QgcSA9IG5ldyBRdWF0KG1lbW9yeU1hbmFnZXIuY3JlYXRlKDQpKTtcbiAgICBxLnNldChbMCwgTWF0aC5zaW4oYW5nbGUgLyAyKSwgMCwgTWF0aC5jb3MoYW5nbGUgLyAyKV0pO1xuICAgIHJldHVybiBxO1xuICB9XG5cbiAgLyoqIFJldHVybiBhIFF1YXQgZnJvbSByb3RhdGlvbiBhcm91bmQgei1heGlzLiAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21BbmdsZVooYW5nbGU6IG51bWJlcik6IFF1YXQge1xuICAgIGNvbnN0IHEgPSBuZXcgUXVhdChtZW1vcnlNYW5hZ2VyLmNyZWF0ZSg0KSk7XG4gICAgcS5zZXQoWzAsIDAsIE1hdGguc2luKGFuZ2xlIC8gMiksIE1hdGguY29zKGFuZ2xlIC8gMildKTtcbiAgICByZXR1cm4gcTtcbiAgfVxuXG4gIHByaXZhdGUgY29uc3RydWN0b3IocHRyOiBudW1iZXIpIHtcbiAgICBzdXBlcihwdHIpO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIGdldCBsZW5ndGgoKTogNCB7XG4gICAgcmV0dXJuIDQ7XG4gIH1cblxuICBwdWJsaWMgbXVsKHJoczogUXVhdCk6IHRoaXMge1xuICAgIGNvbnN0IGxlZnQgPSAodGhpcy5ieXRlT2Zmc2V0IC8gQllURVNfUEVSX0ZMT0FUNjQpIHwgMDtcbiAgICBjb25zdCByaWdodCA9IChyaHMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0KSB8IDA7XG4gICAgY29uc3QgdmlldyA9IG1lbW9yeU1hbmFnZXIudmlldztcbiAgICBjb25zdCB4ID0gdmlld1tsZWZ0ICsgM10gKiB2aWV3W3JpZ2h0ICsgMF0gKyB2aWV3W2xlZnQgKyAwXSAqIHZpZXdbcmlnaHQgKyAzXVxuICAgICAgKyB2aWV3W2xlZnQgKyAxXSAqIHZpZXdbcmlnaHQgKyAyXSAtIHZpZXdbbGVmdCArIDJdICogdmlld1tyaWdodCArIDFdO1xuICAgIGNvbnN0IHkgPSB2aWV3W2xlZnQgKyAzXSAqIHZpZXdbcmlnaHQgKyAxXSArIHZpZXdbbGVmdCArIDFdICogdmlld1tyaWdodCArIDNdXG4gICAgICArIHZpZXdbbGVmdCArIDJdICogdmlld1tyaWdodCArIDBdIC0gdmlld1tsZWZ0ICsgMF0gKiB2aWV3W3JpZ2h0ICsgMl07XG4gICAgY29uc3QgeiA9IHZpZXdbbGVmdCArIDNdICogdmlld1tyaWdodCArIDJdICsgdmlld1tsZWZ0ICsgMl0gKiB2aWV3W3JpZ2h0ICsgM11cbiAgICAgICsgdmlld1tsZWZ0ICsgMF0gKiB2aWV3W3JpZ2h0ICsgMV0gLSB2aWV3W2xlZnQgKyAxXSAqIHZpZXdbcmlnaHQgKyAwXTtcbiAgICBjb25zdCB3ID0gdmlld1tsZWZ0ICsgM10gKiB2aWV3W3JpZ2h0ICsgM10gLSB2aWV3W2xlZnQgKyAwXSAqIHZpZXdbcmlnaHQgKyAwXVxuICAgICAgLSB2aWV3W2xlZnQgKyAxXSAqIHZpZXdbcmlnaHQgKyAxXSAtIHZpZXdbbGVmdCArIDJdICogdmlld1tyaWdodCArIDJdO1xuXG4gICAgdmlld1tsZWZ0ICsgMF0gPSB4O1xuICAgIHZpZXdbbGVmdCArIDFdID0geTtcbiAgICB2aWV3W2xlZnQgKyAyXSA9IHo7XG4gICAgdmlld1tsZWZ0ICsgM10gPSB3O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgcm90YXRlKHY6IFZlYzMpOiBWZWMzIHtcbiAgICBjb25zdCB2aWV3ID0gbWVtb3J5TWFuYWdlci52aWV3O1xuICAgIHVzaW5nIHExID0gbmV3IFF1YXQobWVtb3J5TWFuYWdlci5jcmVhdGUoNCkpO1xuICAgIHVzaW5nIHEyID0gbmV3IFF1YXQobWVtb3J5TWFuYWdlci5jcmVhdGUoNCkpO1xuXG4gICAgLy8gZm9ybXVsYSB2JyA9IHEgKiB2ICogcV4tMVxuICAgIHExLmNvcHkodGhpcywgMCwgMCwgNCk7XG4gICAgcTIuY29weSh2LCAwLCAwLCAzKTtcbiAgICB2aWV3WyhxMi5ieXRlT2Zmc2V0IC8gQllURVNfUEVSX0ZMT0FUNjQgKyAzKSB8IDBdID0gMDtcbiAgICBxMS5tdWwocTIpO1xuICAgIHEyLmNvcHkodGhpcywgMCwgMCwgNCk7XG4gICAgcTIuaW52ZXJ0KCk7XG4gICAgcTEubXVsKHEyKTtcbiAgICB2LmNvcHkocTEsIDAsIDAsIDMpO1xuXG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICBwdWJsaWMgZG90KHJoczogUXVhdCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGRvdCh0aGlzLCByaHMpO1xuICB9XG5cbiAgcHVibGljIGxlcnAocmhzOiBRdWF0LCB0OiBudW1iZXIpOiB0aGlzIHtcbiAgICBjb25zdCBsZWZ0ID0gKHRoaXMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0KSB8IDA7XG4gICAgY29uc3QgcmlnaHQgPSAocmhzLmJ5dGVPZmZzZXQgLyBCWVRFU19QRVJfRkxPQVQ2NCkgfCAwO1xuICAgIGNvbnN0IHZpZXcgPSBtZW1vcnlNYW5hZ2VyLnZpZXc7XG4gICAgY29uc3QgY29zVGhldGEgPSBkb3QodGhpcywgcmhzKTsgLy8gY2FsY3VsYXRlIGNvc2luZSBmcm9tIGRvdCBwcm9kdWN0XG4gICAgY29uc3QgbWFnQiA9IChjb3NUaGV0YSA8IDApID8gLTEgOiAxO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2aWV3W2xlZnQgKyBpXSA9IHZpZXdbbGVmdCArIGldICogKDEgLSB0KSArIHZpZXdbcmlnaHQgKyBpXSAqIG1hZ0IgKiB0O1xuICAgIH1cbiAgICBub3JtYWxpemUodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgc2xlcnAocmhzOiBRdWF0LCB0OiBudW1iZXIpOiB0aGlzIHtcbiAgICBjb25zdCBsZWZ0ID0gKHRoaXMuYnl0ZU9mZnNldCAvIEJZVEVTX1BFUl9GTE9BVDY0KSB8IDA7XG4gICAgY29uc3QgcmlnaHQgPSAocmhzLmJ5dGVPZmZzZXQgLyBCWVRFU19QRVJfRkxPQVQ2NCkgfCAwO1xuICAgIGNvbnN0IHZpZXcgPSBtZW1vcnlNYW5hZ2VyLnZpZXc7XG4gICAgbGV0IGNvc1RoZXRhID0gZG90KHRoaXMsIHJocyk7IC8vIGNhbGN1bGF0ZSBjb3NpbmUgZnJvbSBkb3QgcHJvZHVjdFxuICAgIGxldCBtYWdCID0gMTtcbiAgICAvLyB1c2UgdGhlIHNob3J0ZXN0IHBhdGhcbiAgICBpZiAoY29zVGhldGEgPCAwKSB7XG4gICAgICBjb3NUaGV0YSAqPSAtMTtcbiAgICAgIG1hZ0IgPSAtMTtcbiAgICB9XG5cbiAgICAvLyBpbml0aWFsaXplIHdpdGggbGluZWFyIGludGVycG9sYXRpb25cbiAgICBsZXQgc2NhbGUwID0gMSAtIHQ7XG4gICAgbGV0IHNjYWxlMSA9IHQ7XG5cbiAgICAvLyB1c2Ugc3BoZXJpY2FsIGludGVycG9sYXRpb24gb25seSBpZiB0aGUgcXVhdGVybmlvbnMgYXJlIG5vdCB2ZXJ5IGNsb3NlXG4gICAgaWYgKDEgLSBjb3NUaGV0YSA+IEVQU0lMT04pIHtcbiAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hY29zKGNvc1RoZXRhKTtcbiAgICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4odGhldGEpO1xuICAgICAgc2NhbGUwID0gTWF0aC5zaW4oKDEgLSB0KSAqIHRoZXRhKSAvIHNpblRoZXRhO1xuICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIHRoZXRhKSAvIHNpblRoZXRhO1xuICAgIH1cbiAgICBzY2FsZTEgKj0gbWFnQjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmlld1tsZWZ0ICsgaV0gPSB2aWV3W2xlZnQgKyBpXSAqIHNjYWxlMCArIHZpZXdbcmlnaHQgKyBpXSAqIHNjYWxlMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgbm9ybWFsaXplKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBub3JtYWxpemUodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgaW52ZXJ0KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNxckxlbiA9IGRvdCh0aGlzLCB0aGlzKTtcbiAgICBpZiAoc3FyTGVuID09PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgY29uc3QgbGVmdCA9ICh0aGlzLmJ5dGVPZmZzZXQgLyBCWVRFU19QRVJfRkxPQVQ2NCkgfCAwO1xuICAgIGNvbnN0IHZpZXcgPSBtZW1vcnlNYW5hZ2VyLnZpZXc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgICAgdmlld1tsZWZ0ICsgaV0gPSAtdmlld1tsZWZ0ICsgaV0gLyBzcXJMZW47XG4gICAgfVxuICAgIHZpZXdbbGVmdCArIDNdIC89IHNxckxlbjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiczNCQUFTQSxPQUFPLENBQUVDLE1BQU0sMkJBRWZDLEdBQUcsQ0FBRUMsU0FBUywyQkFDZEMsaUJBQWlCLENBQUVDLG1CQUFtQixDQUFFQyxhQUFhLDBCQUNyREMsSUFBSSxnQkFFYixLQUFNLENBQUFDLEVBQUUsQ0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUd2QixNQUFPLE1BQU0sQ0FBQUMsSUFBSSxRQUFTLENBQUFKLG1CQUF3QyxDQUVoRSxNQUFjLENBQUFLLFFBQVFBLENBQUEsQ0FBUyxDQUM3QixLQUFNLENBQUFDLENBQUMsQ0FBRyxHQUFJLENBQUFGLElBQUksQ0FBQ0gsYUFBYSxDQUFDTSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDM0NELENBQUMsQ0FBQ0UsR0FBRyxDQUFDTCxFQUFFLENBQUMsQ0FDVCxNQUFPLENBQUFHLENBQ1QsQ0FHQSxNQUFjLENBQUFHLFlBQVlBLENBQUNDLElBQVUsQ0FBRUMsRUFBUSxFQUFRLFFBQUFDLFNBQUEsQ0FBQUMsVUFBQSxHQUNyRCxLQUFNLENBQUFoQixHQUFHLENBQUdhLElBQUksQ0FBQ2IsR0FBRyxDQUFDYyxFQUFFLENBQUMsQ0FFeEIsR0FBSWYsTUFBTSxDQUFDQyxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxRQUFBaUIsVUFBQSxDQUFBRCxVQUFBLEdBRW5CLEtBQU0sRUFBR0UsQ0FBQyxDQUFFQyxDQUFDLENBQUMsQ0FBR04sSUFB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Q2EsSUFBSSxDQUFHLENBQUMsQ0FBQyxDQUFHYixJQUFJLENBQUNjLEtBQUssQ0FBRyxDQUFDLENBQUMsQ0FDekVkLElBQUksQ0FBQ2EsSUFBSSxDQUFHLENBQUMsQ0FBQyxDQUFHYixJQUFJLENBQUNjLEtBQUssQ0FBRyxDQUFDLENBQUMsQ0FBR2QsSUFBSSxDQUFDYSxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUdiLElBQUksQ0FBQ2MsS0FBSyxDQUFHLENBQUMsQ0FBQyxDQUN2RSxLQUFNLENBQUE1QixDQUFDLENBQUdjLElBQUksQ0FBQ2EsSUFBSSxDQUFHLENBQUMsQ0FBQyxDQUFHYixJQUFJLENBQUNjLEtBQUssQ0FBRyxDQUFDLENBQUMsQ0FBR2QsSUFBSSxDQUFDYSxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUdiLElBQUksQ0FBQ2MsS0FBSyxDQUFHLENBQUMsQ0FBQyxDQUN6RWQsSUFBSSxDQUFDYSxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUdiLElBQUksQ0FBQ2MsS0FBSyxDQUFHLENBQUMsQ0FBQyxDQUFHZCxJQUFJLENBQUNhLElBQUksQ0FBRyxDQUFDLENBQUMsQ0FBR2IsSUFBSSxDQUFDYyxLQUFLLENBQUcsQ0FBQyxDQUFDLENBQ3ZFLEtBQU0sQ0FBQTNCLENBQUMsQ0FBR2EsSUFBSSxDQUFDYSxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUdiLElBQUksQ0FBQ2MsS0FBSyxDQUFHLENBQUMsQ0FBQyxDQUFHZCxJQUFJLENBQUNhLElBQUksQ0FBRyxDQUFDLENBQUMsQ0FBR2IsSUFBSSxDQUFDYyxLQUFLLENBQUcsQ0FBQyxDQUFDLENBQ3pFZCxJQUFJLENBQUNhLElBQUksQ0FBRyxDQUFDLENBQUMsQ0FBR2IsSUFBSSxDQUFDYyxLQUFLLENBQUcsQ0FBQyxDQUFDLENBQUdkLElBQUksQ0FBQ2EsSUFBSSxDQUFHLENBQUMsQ0FBQyxDQUFHYixJQUFJLENBQUNjLEtBQUssQ0FBRyxDQUFDLENBQUMsQ0FDdkUsS0FBTSxDQUFBRSxDQUFDLENBQUdoQixJQUFJLENBQUNhLElBQUksQ0FBRyxD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