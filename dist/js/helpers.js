import{lerp as lerpNum}from"../scalar.js";import{BYTES_PER_FLOAT64,memoryManager}from"./memory.js";const TEMP=Array(16);export function add(lhs,rhs){const left=lhs.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<lhs.length;++i){view[left+i]+=view[right+i]}}export function sub(lhs,rhs){const left=lhs.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<lhs.length;++i){view[left+i]-=view[right+i]}}export function scale(lhs,factor){const left=lhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<lhs.length;++i){view[left+i]*=factor}}export function dot(lhs,rhs){const left=lhs.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;let result=0;for(let i=0;i<lhs.length;++i){result+=view[left+i]*view[right+i]}return result}export function normalize(v){const sqrLen=dot(v,v);if(sqrLen===0){return false}const len=Math.sqrt(sqrLen);const ptr=v.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<v.length;++i){view[ptr+i]/=len}return true}export function lerp(lhs,rhs,t){const left=lhs.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<lhs.length;++i){view[left+i]=lerpNum(view[left+i],view[right+i],t)}}export function mul(lhs,rhs,n,assignRight=false){const rr=lhs.length/n;const rc=rhs.length/n;const left=lhs.byteOffset/BYTES_PER_FLOAT64|0;const right=rhs.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<rc;++i){for(let j=0;j<rr;++j){let f=0;for(let k=0;k<n;++k){f+=view[left+k*rr+j]*view[right+i*n+k]}TEMP[i*rr+j]=f}}const target=assignRight?rhs:lhs;const targetPtr=assignRight?right:left;for(let i=0;i<target.length;++i){view[targetPtr+i]=TEMP[i]}}export function transpose(m,n){const ptr=m.byteOffset/BYTES_PER_FLOAT64|0;const view=memoryManager.view;for(let i=0;i<n;++i){for(let j=i;j<n;++j){const f=view[ptr+j*n+i];view[ptr+j*n+i]=view[ptr+i*n+j];view[ptr+i*n+j]=f}}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,