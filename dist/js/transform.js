function _usingCtx2(){var r="function"==typeof SuppressedError?SuppressedError:function(r,n){var e=new Error;return e.name="SuppressedError",e.suppressed=n,e.error=r,e},n={},e=[];function using(r,n){if(null!=n){if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==o&&(o=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof o)throw new TypeError("Property [Symbol.dispose] is not a function.");e.push({v:n,d:o,a:r})}return n}return{e:n,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o=this.e;function next(){for(;r=e.pop();)try{var r,t=r.d.call(r.v);if(r.a)return Promise.resolve(t).then(next,err)}catch(r){return err(r)}if(o!==n)throw o}function err(e){return o=o!==n?new r(o,e):e,next()}return next()}}}import{copysign}from"../scalar.js";import{Mat3,Mat4}from"./mat.js";import{BYTES_PER_FLOAT64,memoryManager}from"./memory.js";import{Quat}from"./quat.js";import{Vec3}from"./vec.js";const TEMP_VEC3=new Float64Array(3);const TEMP_MAT3=new Float64Array(9);const TEMP_MAT4=new Float64Array(16);const MAT3_ID=[1,0,0,0,1,0,0,0,1];const MAT4_ID=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];export function translation2d(v,out=Mat3.identity()){out.set(MAT3_ID);out.copy(v,6,0,2);return out}export function scaling2d(v,out=Mat3.identity()){const[x,y]=v;TEMP_MAT3.set(MAT3_ID);TEMP_MAT3[0]=x;TEMP_MAT3[4]=y;out.set(TEMP_MAT3);return out}export function rotation2d(angle,out=Mat3.identity()){TEMP_MAT3.set(MAT3_ID);TEMP_MAT3[0]=TEMP_MAT3[4]=Math.cos(angle);TEMP_MAT3[1]=TEMP_MAT3[3]=Math.sin(angle);TEMP_MAT3[3]*=-1;out.set(TEMP_MAT3);return out}export function transformation2d(translate,rotateAngle,scale,out=Mat3.identity()){TEMP_MAT3.set(MAT3_ID);TEMP_MAT3[0]=TEMP_MAT3[4]=Math.cos(rotateAngle);TEMP_MAT3[1]=TEMP_MAT3[3]=Math.sin(rotateAngle);TEMP_MAT3[3]*=-1;const scaling=[...scale];for(let i=0;i<2;++i){for(let j=0;j<2;++j){TEMP_MAT3[3*i+j]*=scaling[i]}}out.set(TEMP_MAT3);out.copy(translate,6,0,2);return out}export function translation(v,out=Mat4.identity()){out.set(MAT4_ID);out.copy(v,12,0,3);return out}export function scaling(v,out=Mat4.identity()){const[x,y,z]=v;out.set(MAT4_ID);out.setAt(0,x);out.setAt(5,y);out.setAt(10,z);return out}export function rotation(q,out=Mat4.identity()){const[x,y,z,w]=q;const xx=x*x,xy=x*y,xz=x*z,yy=y*y,yz=y*z,zz=z*z,wx=w*x,wy=w*y,wz=w*z;TEMP_MAT4[0]=1-2*(yy+zz);TEMP_MAT4[1]=2*(xy+wz);TEMP_MAT4[2]=2*(xz-wy);TEMP_MAT4[4]=2*(xy-wz);TEMP_MAT4[5]=1-2*(xx+zz);TEMP_MAT4[6]=2*(yz+wx);TEMP_MAT4[8]=2*(xz+wy);TEMP_MAT4[9]=2*(yz-wx);TEMP_MAT4[10]=1-2*(xx+yy);TEMP_MAT4[3]=TEMP_MAT4[7]=TEMP_MAT4[11]=TEMP_MAT4[12]=TEMP_MAT4[13]=TEMP_MAT4[14]=0;TEMP_MAT4[15]=1;out.set(TEMP_MAT4);return out}export function translationOf(m,out=new Vec3){out.copy(m,0,12,3);return out}function _scalingOf(m){const view=memoryManager.view;const start=m.byteOffset/BYTES_PER_FLOAT64|0;for(let i=0;i<3;++i){TEMP_VEC3[i]=0;for(let j=0;j<3;++j){TEMP_VEC3[i]+=view[start+4*i+j]*view[start+4*i+j]}TEMP_VEC3[i]=Math.sqrt(TEMP_VEC3[i])}return TEMP_VEC3}export function scalingOf(m,out=new Vec3){out.set(_scalingOf(m));return out}export function rotationOf(trs,out=Quat.identity()){const m=[...trs];const[sx,sy,sz]=_scalingOf(trs);const m00=m[0]/sx,m11=m[5]/sy,m22=m[10]/sz;out.set([copysign(Math.sqrt(Math.max(0,1+m00-m11-m22))/2,m[6]/sy-m[9]/sz),copysign(Math.sqrt(Math.max(0,1-m00+m11-m22))/2,m[8]/sz-m[2]/sx),copysign(Math.sqrt(Math.max(0,1-m00-m11+m22))/2,m[1]/sx-m[4]/sy),Math.sqrt(Math.max(0,1+m00+m11+m22))/2]);return out}export function transformation(translate,rotate,scale,out=Mat4.identity()){rotation(rotate,out);const m=[...out];const scaling=[...scale];for(let i=0;i<3;++i){for(let j=0;j<3;++j){m[4*i+j]*=scaling[i]}}out.set(m);out.copy(translate,12,0,3);return out}export function inverseTRS(trs,out=Mat4.identity()){try{var _usingCtx=_usingCtx2();const t=_usingCtx.u(new Vec3);t.copy(trs,0,12,3);const scale=_scalingOf(trs);out.copy(trs);out.transpose();const m=[...out];m[3]=m[7]=m[11]=0;for(let i=0;i<3;++i){for(let j=0;j<3;++j){const factor=scale[j]*scale[j];if(factor===0){return false}m[4*i+j]*=1/factor}}out.set(m);t.scale(-1).mulMat4(out);out.copy(t,12,0,3);return true}catch(_){_usingCtx.e=_}finally{_usingCtx.d()}}export function ortho(left,right,bottom,top,znear,zfar,out=Mat4.identity()){const x=1/(right-left);const y=1/(top-bottom);const z=1/(znear-zfar);TEMP_MAT4.set(MAT4_ID);TEMP_MAT4[0]=2*x;TEMP_MAT4[5]=2*y;TEMP_MAT4[10]=2*z;TEMP_MAT4[12]=-(right+left)*x;TEMP_MAT4[13]=-(top+bottom)*y;TEMP_MAT4[14]=(znear+zfar)*z;out.set(TEMP_MAT4);return out}export function perspective(aspect,yfov,znear,zfar,out=Mat4.identity()){const f=1/Math.tan(yfov/2);TEMP_MAT4.set(MAT4_ID);TEMP_MAT4[0]=f/aspect;TEMP_MAT4[5]=f;TEMP_MAT4[11]=-1;TEMP_MAT4[15]=0;if(isFinite(zfar)){const rangeInv=1/(znear-zfar);TEMP_MAT4[10]=(znear+zfar)*rangeInv;TEMP_MAT4[14]=2*znear*zfar*rangeInv}else{TEMP_MAT4[10]=-1;TEMP_MAT4[14]=-2*znear}out.set(TEMP_MAT4);return out}export function perspectiveViewport(left,right,bottom,top,znear,zfar,out=Mat4.identity()){const x=1/(right-left);const y=1/(top-bottom);TEMP_MAT4.set(MAT4_ID);TEMP_MAT4[0]=2*znear*x;TEMP_MAT4[5]=2*znear*y;TEMP_MAT4[8]=(right+left)*x;TEMP_MAT4[9]=(top+bottom)*y;TEMP_MAT4[11]=-1;TEMP_MAT4[15]=0;if(isFinite(zfar)){const rangeInv=1/(znear-zfar);TEMP_MAT4[10]=(znear+zfar)*rangeInv;TEMP_MAT4[14]=2*znear*zfar*rangeInv}else{TEMP_MAT4[10]=-1;TEMP_MAT4[14]=-2*znear}out.set(TEMP_MAT4);return out}export function targetTo(eye,center,up,out=Mat4.identity()){try{var _usingCtx3=_usingCtx2();const v=_usingCtx3.u(new Vec3),n=_usingCtx3.u(new Vec3),u=_usingCtx3.u(new Vec3);v.copy(eye);v.sub(center).normalize();n.copy(up);n.cross(v).normalize();u.copy(v);u.cross(n).normalize();out.set(MAT4_ID);out.copy(n,0,0,3);out.copy(u,4,0,3);out.copy(v,8,0,3);out.copy(eye,12,0,3);return out}catch(_){_usingCtx3.e=_}finally{_usingCtx3.d()}}export function lookAt(eye,center,up,out=Mat4.identity()){try{var _usingCtx4=_usingCtx2();const v=_usingCtx4.u(new Vec3),n=_usingCtx4.u(new Vec3),u=_usingCtx4.u(new Vec3);v.copy(center);v.sub(eye).normalize();n.copy(v);n.cross(up).normalize();u.copy(n);u.cross(v).normalize();const m=[...v,...n,...u];TEMP_MAT4[0]=m[3];TEMP_MAT4[1]=m[6];TEMP_MAT4[2]=-m[0];TEMP_MAT4[4]=m[4];TEMP_MAT4[5]=m[7];TEMP_MAT4[6]=-m[1];TEMP_MAT4[8]=m[5];TEMP_MAT4[9]=m[8];TEMP_MAT4[10]=-m[2];TEMP_MAT4[12]=-n.dot(eye);TEMP_MAT4[13]=-u.dot(eye);TEMP_MAT4[14]=v.dot(eye);TEMP_MAT4[3]=TEMP_MAT4[7]=TEMP_MAT4[11]=0;TEMP_MAT4[15]=1;out.set(TEMP_MAT4);return out}catch(_){_usingCtx4.e=_}finally{_usingCtx4.d()}}export function lookAtDir(pitch,yaw,out=new Vec3){const negCosPitch=-Math.cos(pitch);TEMP_VEC3[0]=negCosPitch*Math.sin(yaw);TEMP_VEC3[1]=Math.sin(pitch);TEMP_VEC3[2]=negCosPitch*Math.cos(yaw);out.set(TEMP_VEC3);return out}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,