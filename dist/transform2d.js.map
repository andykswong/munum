{"version":3,"sources":["../assembly/transform2d.ts"],"names":["mat3","translate2d","x","y","out","create","id","scale2d","rotate2d","theta","Math","cos","sin","transform2d","translation","rotation","scaling","i","j"],"mappings":"MACO,GAAKA,CAAAA,I,iBAKZ,MAAO,SAASC,CAAAA,WAAT,CAAqBC,CAArB,CAA+BC,CAA/B,CAAyCC,GAAS,CAAGJ,IAAI,CAACK,MAAL,EAArD,CAA0E,CAC/EL,IAAI,CAACM,EAAL,CAAQF,GAAR,EACUA,GAAG,CAAC,CAAD,CAAH,CAASF,CAAnB,CACUE,GAAG,CAAC,CAAD,CAAH,CAASD,CAAnB,CACA,MAAOC,CAAAA,GACR,CAKD,MAAO,SAASG,CAAAA,OAAT,CAAiBL,CAAjB,CAA2BC,CAA3B,CAAqCC,GAAS,CAAGJ,IAAI,CAACK,MAAL,EAAjD,CAAsE,CAC3EL,IAAI,CAACM,EAAL,CAAQF,GAAR,EACUA,GAAG,CAAC,CAAD,CAAH,CAASF,CAAnB,CACUE,GAAG,CAAC,CAAD,CAAH,CAASD,CAAnB,CACA,MAAOC,CAAAA,GACR,CAKD,MAAO,SAASI,CAAAA,QAAT,CAAkBC,KAAlB,CAAgCL,GAAS,CAAGJ,IAAI,CAACK,MAAL,EAA5C,CAAiE,CACtEL,IAAI,CAACM,EAAL,CAAQF,GAAR,EACUA,GAAG,CAAC,CAAD,CAAH,CAASA,GAAG,CAAC,CAAD,CAAH,CAASM,IAAI,CAACC,GAAL,CAASF,KAAT,CAA5B,CACUL,GAAG,CAAC,CAAD,CAAH,CAASA,GAAG,CAAC,CAAD,CAAH,CAASM,IAAI,CAACE,GAAL,CAASH,KAAT,CAA5B,CACUL,GAAG,CAAC,CAAD,CAAH,EAAU,CAAC,CAArB,CACA,MAAOA,CAAAA,GACR,CAMA,MAAO,SAASS,CAAAA,WAAT,CAAqBC,WAArB,CAAgDC,QAAhD,CAAiEC,OAAjE,CAAwFZ,GAAS,CAAGJ,IAAI,CAACK,MAAL,EAApG,CAAyH,CAE/HG,QAAQ,CAACO,QAAD,CAAWX,GAAX,CAAR,CAGA,IAAK,GAAIa,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuB,EAAEA,CAAzB,CAA4B,CAC1B,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuB,EAAEA,CAAzB,CAA4B,CAChBd,GAAG,CAAC,EAAIa,CAAJ,CAAQC,CAAT,CAAH,EAAkBF,OAAO,CAACC,CAAD,CACpC,CACF,CAGSb,GAAG,CAAC,CAAD,CAAH,CAASU,WAAW,CAAC,CAAD,CAA9B,CACUV,GAAG,CAAC,CAAD,CAAH,CAASU,WAAW,CAAC,CAAD,CAA9B,CAEA,MAAOV,CAAAA,GACR","sourcesContent":["import { Float, Mat3, ReadonlyVec2 } from './types';\r\nimport * as mat3 from './mat3';\r\n\r\n/**\r\n * Return a {@link Mat3} for a 2D point translated by (x, y).\r\n */\r\nexport function translate2d(x: Float, y: Float, out: Mat3 = mat3.create()): Mat3 {\r\n  mat3.id(out);\r\n  unchecked(out[6] = x);\r\n  unchecked(out[7] = y);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat3} for a 2D point scaled by (x, y).\r\n */\r\nexport function scale2d(x: Float, y: Float, out: Mat3 = mat3.create()): Mat3 {\r\n  mat3.id(out);\r\n  unchecked(out[0] = x);\r\n  unchecked(out[4] = y);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat3} for a 2D point rotated in couterclockwise direction.\r\n */\r\nexport function rotate2d(theta: Float, out: Mat3 = mat3.create()): Mat3 {\r\n  mat3.id(out);\r\n  unchecked(out[0] = out[4] = Math.cos(theta) as Float);\r\n  unchecked(out[1] = out[3] = Math.sin(theta) as Float);\r\n  unchecked(out[3] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat3} for transformation in TRS order (= translation * rotation * scale).\r\n * @returns out = translation * rotation * scale\r\n */\r\n export function transform2d(translation: ReadonlyVec2, rotation: Float, scaling: ReadonlyVec2, out: Mat3 = mat3.create()): Mat3 {\r\n  // Apply rotation\r\n  rotate2d(rotation, out);\r\n\r\n  // Apply scaling\r\n  for (let i = 0; i < 2; ++i) {\r\n    for (let j = 0; j < 2; ++j) {\r\n      unchecked(out[3 * i + j] *= scaling[i]);\r\n    }\r\n  }\r\n\r\n  // Apply translation\r\n  unchecked(out[6] = translation[0]);\r\n  unchecked(out[7] = translation[1]);\r\n\r\n  return out;\r\n}"],"file":"transform2d.js"}