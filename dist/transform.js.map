{"version":3,"sources":["../assembly/transform.ts"],"names":["array","mat4","quat","vec3","copysign","v0","create","v1","v2","q","m0","m1","translate","v","out","id","copy","scale","s","rotate","toMat4","rotateX","theta","Math","cos","sin","rotateY","rotateZ","rotateAxis","axis","x","y","z","c","omc","transform","translation","rotation","scaling","i","j","translationOf","m","scaleOf","len","rotationOf","m00","m11","m22","sqrt","max","ortho","left","right","bottom","top","znear","zfar","perspective","aspectRatio","yfov","Infinity","f","tan","isFinite","rangeInv","targetTo","eye","center","up","sub","norm","n","cross","u","lookAt","dot","arcball","distance","t0","t1","r","conj","mul","direction","pitch","yaw","negCosPitch"],"mappings":"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","sourcesContent":["import { Float, Mat4, Quat, ReadonlyMat4, ReadonlyQuat, ReadonlyVec3, Vec3 } from './types';\r\nimport * as array from './array';\r\nimport * as mat4 from './mat4';\r\nimport * as quat from './quat';\r\nimport * as vec3 from './vec3';\r\nimport { copysign } from './scalar';\r\n\r\n// Temp variables\r\nconst v0: Vec3 = vec3.create();\r\nconst v1: Vec3 = vec3.create();\r\nconst v2: Vec3 = vec3.create();\r\nconst q: Quat = quat.create();\r\nconst m0: Mat4 = mat4.create();\r\nconst m1: Mat4 = mat4.create();\r\n\r\n/**\r\n * Return a {@link Mat4} for a 3D point translated by (x, y, z).\r\n */\r\nexport function translate(v: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  array.copy(v, out, 0, 12, 3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Return a {@link Mat4} for a 3D point scaled by (x, y, z).\r\n */\r\nexport function scale(s: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[0] = s[0]);\r\n  unchecked(out[5] = s[1]);\r\n  unchecked(out[10] = s[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a rotation by a {@link Quat}.\r\n */\r\nexport function rotate(q: ReadonlyQuat, out: Mat4 = mat4.create()): Mat4 {\r\n  return quat.toMat4(q, out);\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about the x-axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateX(theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[5] = out[10] = Math.cos(theta) as Float);\r\n  unchecked(out[6] = out[9] = Math.sin(theta) as Float);\r\n  unchecked(out[9] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about the y-axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateY(theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[0] = out[10] = Math.cos(theta) as Float);\r\n  unchecked(out[2] = out[8] = Math.sin(theta) as Float);\r\n  unchecked(out[2] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about the z-axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateZ(theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[0] = out[5] = Math.cos(theta) as Float);\r\n  unchecked(out[1] = out[4] = Math.sin(theta) as Float);\r\n  unchecked(out[4] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about a given unit axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateAxis(axis: ReadonlyVec3, theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  const\r\n    x: Float = unchecked(axis[0]),\r\n    y: Float = unchecked(axis[1]),\r\n    z: Float = unchecked(axis[2]);\r\n  const s: Float = Math.sin(theta) as Float;\r\n  const c: Float = Math.cos(theta) as Float;\r\n  const omc: Float = 1 - c;\r\n\r\n  unchecked(out[0] = x * x * omc + c);\r\n  unchecked(out[1] = x * y * omc + z * s);\r\n  unchecked(out[2] = x * z * omc - y * s);\r\n  unchecked(out[4] = y * x * omc - z * s);\r\n  unchecked(out[5] = y * y * omc + c);\r\n  unchecked(out[6] = y * z * omc + x * s);\r\n  unchecked(out[8] = z * x * omc + y * s);\r\n  unchecked(out[9] = z * y * omc - x * s);\r\n  unchecked(out[10] = z * z * omc + c);\r\n  unchecked(out[3] = out[7] = out[11] = out[12] = out[13] = out[14] = 0);\r\n  unchecked(out[15] = 1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for transformation in TRS order (= translation * rotation * scale).\r\n * @returns out = translation * rotation * scale\r\n */\r\nexport function transform(translation: ReadonlyVec3, rotation: ReadonlyQuat, scaling: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\r\n  // Apply rotation\r\n  rotate(rotation, out);\r\n\r\n  // Apply scaling\r\n  for (let i = 0; i < 3; ++i) {\r\n    for (let j = 0; j < 3; ++j) {\r\n      unchecked(out[4 * i + j] *= scaling[i]);\r\n    }\r\n  }\r\n\r\n  // Apply translation\r\n  array.copy(translation, out, 0, 12, 3);\r\n\r\n  return out;\r\n}\r\n\r\n// -- Transformation matrix decomposition --\r\n\r\n/**\r\n * Extract the {@link Vec3} translation component from a transformation matrix.\r\n */\r\nexport function translationOf(m: ReadonlyMat4, out: Vec3 = vec3.create()): Vec3 {\r\n  return array.copy(m, out, 12, 0, 3) as Vec3;\r\n}\r\n\r\n/**\r\n * Extract the {@link Vec3} scaling components from an affine transformation matrix.\r\n */\r\nexport function scaleOf(m: ReadonlyMat4, out: Vec3 = vec3.create()): Vec3 {\r\n  for (let i = 0; i < 3; ++i) {\r\n    for (let j = 0; j < 3; ++j) {\r\n      unchecked(v0[j] = m[4 * i + j]);\r\n    }\r\n    unchecked(out[i] = vec3.len(v0));\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Extract the {@link Quat} rotation components from an affine transformation matrix.\r\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\r\n */\r\nexport function rotationOf(m: ReadonlyMat4, out: Quat = quat.create()): Quat {\r\n  scaleOf(m, v1);\r\n  const\r\n    m00: Float = unchecked(m[0] / v1[0]),\r\n    m11: Float = unchecked(m[5] / v1[1]),\r\n    m22: Float = unchecked(m[10] / v1[2]);\r\n\r\n  unchecked(out[3] = (Math.sqrt(Math.max(0, 1 + m00 + m11 + m22)) as Float) / 2);\r\n  unchecked(out[0] = copysign((Math.sqrt(Math.max(0, 1 + m00 - m11 - m22)) as Float) / 2, m[6] / v1[1] - m[9] / v1[2]));\r\n  unchecked(out[1] = copysign((Math.sqrt(Math.max(0, 1 - m00 + m11 - m22)) as Float) / 2, m[8] / v1[2] - m[2] / v1[0]));\r\n  unchecked(out[2] = copysign((Math.sqrt(Math.max(0, 1 - m00 - m11 + m22)) as Float) / 2, m[1] / v1[0] - m[4] / v1[1]));\r\n\r\n  return out;\r\n}\r\n\r\n// -- Camera matrices --\r\n\r\n/**\r\n * Calculate the {@link Mat4} orthographic projection matrix.\r\n * To apply a glTF orthographic camera, use: left = -xmag, right = xmag, bottom = -ymag, top = ymag.\r\n * @see https://en.wikipedia.org/wiki/Orthographic_projection\r\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\r\n */\r\nexport function ortho(\r\n  left: Float, right: Float, bottom: Float, top: Float, znear: Float, zfar: Float,\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const x: Float = 1 / (right - left);\r\n  const y: Float = 1 / (top - bottom);\r\n  const z: Float = 1 / (znear - zfar);\r\n\r\n  mat4.id(out);\r\n  unchecked(out[0] = 2 * x);\r\n  unchecked(out[5] = 2 * y);\r\n  unchecked(out[10] = 2 * z);\r\n  unchecked(out[12] = -(right + left) * x);\r\n  unchecked(out[13] = -(top + bottom) * y);\r\n  unchecked(out[14] = (znear + zfar) * z);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} perspective projection using glTF's formula. Use infinite projection if zfar = Infinity.\r\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\r\n * @param zfar defaults to Infinity\r\n */\r\nexport function perspective(\r\n  aspectRatio: Float, yfov: Float, znear: Float, zfar: Float = Infinity,\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const f: Float = 1 / (Math.tan(yfov / 2) as Float);\r\n\r\n  mat4.id(out);\r\n  unchecked(out[0] = f / aspectRatio);\r\n  unchecked(out[5] = f);\r\n  unchecked(out[11] = -1);\r\n  unchecked(out[15] = 0);\r\n\r\n  if (isFinite(zfar)) {\r\n    const rangeInv: Float = 1 / (znear - zfar);\r\n    unchecked(out[10] = (znear + zfar) * rangeInv);\r\n    unchecked(out[14] = 2 * znear * zfar * rangeInv);\r\n  } else {\r\n    unchecked(out[10] = -1);\r\n    unchecked(out[14] = -2 * znear);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} model matrix for a camera at eye position looking at the center\r\n * position with a given up direction.\r\n */\r\nexport function targetTo(\r\n  eye: ReadonlyVec3, center: ReadonlyVec3, up: ReadonlyVec3 = vec3.create(0, 1, 0),\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const v: Vec3 = vec3.sub(eye, center, v0); // front\r\n  vec3.norm(v, v);\r\n  const n: Vec3 = vec3.cross(up, v, v1); // right\r\n  vec3.norm(n, n);\r\n  const u: Vec3 = vec3.cross(v, n, v2); // up\r\n  vec3.norm(u, u);\r\n\r\n  array.copy(n, out, 0, 0, 3);\r\n  array.copy(u, out, 0, 4, 3);\r\n  array.copy(v, out, 0, 8, 3);\r\n  array.copy(eye, out, 0, 12, 3);\r\n  unchecked(out[3] = out[7] = out[11] = 0);\r\n  unchecked(out[15] = 1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} view matrix for a camera at eye position looking at the center\r\n * position with a given up direction.\r\n * @param center defaults to the origin, i.e. [0, 0, 0]\r\n * @param up defaults to the positive y-axis, i.e. [0, 1, 0]\r\n */\r\nexport function lookAt(\r\n  eye: ReadonlyVec3,\r\n  center: ReadonlyVec3 = vec3.create(),\r\n  up: ReadonlyVec3 = vec3.create(0, 1, 0),\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const v: Vec3 = vec3.sub(center, eye, v0); // front\r\n  vec3.norm(v, v);\r\n  const n: Vec3 = vec3.cross(v, up, v1); // right\r\n  vec3.norm(n, n);\r\n  const u: Vec3 = vec3.cross(n, v, v2); // up\r\n  vec3.norm(u, u);\r\n\r\n  unchecked(out[0] = n[0]);\r\n  unchecked(out[1] = u[0]);\r\n  unchecked(out[2] = -v[0]);\r\n  unchecked(out[4] = n[1]);\r\n  unchecked(out[5] = u[1]);\r\n  unchecked(out[6] = -v[1]);\r\n  unchecked(out[8] = n[2]);\r\n  unchecked(out[9] = u[2]);\r\n  unchecked(out[10] = -v[2]);\r\n  unchecked(out[12] = -vec3.dot(n, eye));\r\n  unchecked(out[13] = -vec3.dot(u, eye));\r\n  unchecked(out[14] = vec3.dot(v, eye));\r\n  unchecked(out[3] = out[7] = out[11] = 0);\r\n  unchecked(out[15] = 1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} view matrix for an arcball camera from the distance to center and a rotation quaternion.\r\n * @param center defaults to the origin, i.e. [0, 0, 0]\r\n */\r\nexport function arcball(\r\n  distance: ReadonlyVec3, rotation: ReadonlyQuat, center: ReadonlyVec3 = vec3.create(),\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const t0: Mat4 = translate(vec3.scale(distance, -1, v0), m0); // translate away from origin\r\n  const t1: Mat4 = translate(vec3.scale(center, -1, v0), m1); // set center as origin\r\n  const r: Mat4 = rotate(quat.conj(rotation, q), out); // rotate around the origin\r\n  return mat4.mul(t0, mat4.mul(r, t1, out), out);\r\n}\r\n\r\n/**\r\n * Calculate the look-at direction {@link Vec3} vector from pitch (up/down) and yaw (left/right) angles in radians.\r\n * It looks towards -Z axis when pitch = 0 and yaw = 0.\r\n * This can be used with lookAt method to build an FPS camera view matrix by:\r\n * viewMatrix = lookAt(eye, add(eye, direction(yaw, pitch)), [0, 1, 0])\r\n */\r\nexport function direction(pitch: Float, yaw: Float, out: Vec3 = vec3.create()): Vec3 {\r\n  const negCosPitch: Float = -Math.cos(pitch) as Float;\r\n  unchecked(out[0] = negCosPitch * Math.sin(yaw) as Float);\r\n  unchecked(out[1] = Math.sin(pitch) as Float);\r\n  unchecked(out[2] = negCosPitch * Math.cos(yaw) as Float);\r\n  return out;\r\n}\r\n"],"file":"transform.js"}