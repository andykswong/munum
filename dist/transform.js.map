{"version":3,"file":"transform.js","names":["mat","mat4","quat","vec3","copysign","v0","create","v1","v2","translate","v","out","id","copy","scale","s","rotate","q","toMat4","rotateX","theta","Math","cos","sin","rotateY","rotateZ","rotateAxis","axis","x","y","z","c","omc","transform","translation","rotation","scaling","i","j","inverseTransform","m","transpose","scaleOf","mmul4","translationOf","len","rotationOf","m00","m11","m22","sqrt","max","ortho","left","right","bottom","top","znear","zfar","perspective","aspectRatio","yfov","Infinity","f","tan","isFinite","rangeInv","targetTo","eye","center","up","sub","norm","n","cross","u","lookAt","dot","direction","pitch","yaw","negCosPitch"],"sources":["../assembly/transform.ts"],"sourcesContent":["import { Float, Mat4, Quat, ReadonlyMat4, ReadonlyQuat, ReadonlyVec3, Vec3 } from './types';\nimport * as mat from './mat';\nimport * as mat4 from './mat4';\nimport * as quat from './quat';\nimport * as vec3 from './vec3';\nimport { copysign } from './scalar';\n\n// Temp variables\nconst v0: Vec3 = vec3.create();\nconst v1: Vec3 = vec3.create();\nconst v2: Vec3 = vec3.create();\n\n/**\n * Return a {@link Mat4} for a 3D point translated by (x, y, z).\n */\nexport function translate(v: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\n  mat4.id(out);\n  mat.copy(v, out, 0, 12, 3);\n  return out;\n}\n\n/**\n * Return a {@link Mat4} for a 3D point scaled by (x, y, z).\n */\nexport function scale(s: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\n  mat4.id(out);\n  unchecked(out[0] = s[0]);\n  unchecked(out[5] = s[1]);\n  unchecked(out[10] = s[2]);\n  return out;\n}\n\n/**\n * Returns a {@link Mat4} for a rotation by a {@link Quat}.\n */\nexport function rotate(q: ReadonlyQuat, out: Mat4 = mat4.create()): Mat4 {\n  return quat.toMat4(q, out);\n}\n\n/**\n * Returns a {@link Mat4} for a 3D rotation about the x-axis in couterclockwise direction.\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\n */\nexport function rotateX(theta: Float, out: Mat4 = mat4.create()): Mat4 {\n  mat4.id(out);\n  unchecked(out[5] = out[10] = Math.cos(theta) as Float);\n  unchecked(out[6] = out[9] = Math.sin(theta) as Float);\n  unchecked(out[9] *= -1);\n  return out;\n}\n\n/**\n * Returns a {@link Mat4} for a 3D rotation about the y-axis in couterclockwise direction.\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\n */\nexport function rotateY(theta: Float, out: Mat4 = mat4.create()): Mat4 {\n  mat4.id(out);\n  unchecked(out[0] = out[10] = Math.cos(theta) as Float);\n  unchecked(out[2] = out[8] = Math.sin(theta) as Float);\n  unchecked(out[2] *= -1);\n  return out;\n}\n\n/**\n * Returns a {@link Mat4} for a 3D rotation about the z-axis in couterclockwise direction.\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\n */\nexport function rotateZ(theta: Float, out: Mat4 = mat4.create()): Mat4 {\n  mat4.id(out);\n  unchecked(out[0] = out[5] = Math.cos(theta) as Float);\n  unchecked(out[1] = out[4] = Math.sin(theta) as Float);\n  unchecked(out[4] *= -1);\n  return out;\n}\n\n/**\n * Returns a {@link Mat4} for a 3D rotation about a given unit axis in couterclockwise direction.\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\n */\nexport function rotateAxis(axis: ReadonlyVec3, theta: Float, out: Mat4 = mat4.create()): Mat4 {\n  const\n    x: Float = unchecked(axis[0]),\n    y: Float = unchecked(axis[1]),\n    z: Float = unchecked(axis[2]);\n  const s: Float = Math.sin(theta) as Float;\n  const c: Float = Math.cos(theta) as Float;\n  const omc: Float = 1 - c;\n\n  unchecked(out[0] = x * x * omc + c);\n  unchecked(out[1] = x * y * omc + z * s);\n  unchecked(out[2] = x * z * omc - y * s);\n  unchecked(out[4] = y * x * omc - z * s);\n  unchecked(out[5] = y * y * omc + c);\n  unchecked(out[6] = y * z * omc + x * s);\n  unchecked(out[8] = z * x * omc + y * s);\n  unchecked(out[9] = z * y * omc - x * s);\n  unchecked(out[10] = z * z * omc + c);\n  unchecked(out[3] = out[7] = out[11] = out[12] = out[13] = out[14] = 0);\n  unchecked(out[15] = 1);\n  return out;\n}\n\n/**\n * Returns a {@link Mat4} for transformation in TRS order (= translation * rotation * scale).\n * @returns out = translation * rotation * scale\n */\nexport function transform(translation: ReadonlyVec3, rotation: ReadonlyQuat, scaling: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\n  // Apply rotation\n  rotate(rotation, out);\n\n  // Apply scaling\n  for (let i = 0; i < 3; ++i) {\n    for (let j = 0; j < 3; ++j) {\n      unchecked(out[4 * i + j] *= scaling[i]);\n    }\n  }\n\n  // Apply translation\n  mat.copy(translation, out, 0, 12, 3);\n\n  return out;\n}\n\n/**\n * Returns the inverse of a {@link ReadonlyMat4} that represents a valid transformation in TRS order (= translation * rotation * scale).\n * This function is more efficient than {@link mat4.invert} by using the properties of a TRS matrix.\n * @returns out = M^-1\n */\nexport function inverseTransform(m: ReadonlyMat4, out: Mat4 = mat4.create()): Mat4 {\n  // Assume M is a TRS matrix:\n  // M = T * R * S = [RS  t]\n  //                 [0   1]\n  // Then the inverse of M is:\n  // M^-1 = [(RS)^-1  (RS)^-1 * -t]\n  //        [   0           1     ]\n  // Where: (RS)^-1 = S^-1 * R^-1 = S^-1 * RT = S^-1 * ((RS)(S^-1))T = S^-1 * (S^-1)T * (RS)T = S^-1 * S^-1 * (RS)T\n\n  // Calculate output = (RS)T\n  mat4.transpose(m, out);\n  unchecked(out[3] = out[7] = out[11] = 0);\n\n  // Extract S and premultiply S^-2 = 1/(S*S) to output\n  scaleOf(m, v1);\n  for (let i = 0; i < 3; ++i) {\n    for (let j = 0; j < 3; ++j) {\n      unchecked(out[4 * i + j] *= 1 / (v1[j] * v1[j]));\n    }\n  }\n\n  // With output = (RS)^-1, apply translation = (output * -t) to output\n  mat.copy(\n    vec3.mmul4(out, vec3.scale(mat.copy(m, v0, 12, 0, 3) as Vec3, -1)),\n    out,\n    0, 12, 3\n  );\n\n  return out;\n}\n\n// -- Transformation matrix decomposition --\n\n/**\n * Extract the {@link Vec3} translation component from a transformation matrix.\n */\nexport function translationOf(m: ReadonlyMat4, out: Vec3 = vec3.create()): Vec3 {\n  return mat.copy(m, out, 12, 0, 3) as Vec3;\n}\n\n/**\n * Extract the {@link Vec3} scaling components from a transformation matrix in TRS order (= translation * rotation * scale).\n */\nexport function scaleOf(m: ReadonlyMat4, out: Vec3 = vec3.create()): Vec3 {\n  for (let i = 0; i < 3; ++i) {\n    for (let j = 0; j < 3; ++j) {\n      unchecked(v0[j] = m[4 * i + j]);\n    }\n    unchecked(out[i] = vec3.len(v0));\n  }\n  return out;\n}\n\n/**\n * Extract the {@link Quat} rotation components from a transformation matrix in TRS order (= translation * rotation * scale).\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\n */\nexport function rotationOf(m: ReadonlyMat4, out: Quat = quat.create()): Quat {\n  scaleOf(m, v1);\n  const\n    m00: Float = unchecked(m[0] / v1[0]),\n    m11: Float = unchecked(m[5] / v1[1]),\n    m22: Float = unchecked(m[10] / v1[2]);\n\n  unchecked(out[3] = (Math.sqrt(Math.max(0, 1 + m00 + m11 + m22)) as Float) / 2);\n  unchecked(out[0] = copysign((Math.sqrt(Math.max(0, 1 + m00 - m11 - m22)) as Float) / 2, m[6] / v1[1] - m[9] / v1[2]));\n  unchecked(out[1] = copysign((Math.sqrt(Math.max(0, 1 - m00 + m11 - m22)) as Float) / 2, m[8] / v1[2] - m[2] / v1[0]));\n  unchecked(out[2] = copysign((Math.sqrt(Math.max(0, 1 - m00 - m11 + m22)) as Float) / 2, m[1] / v1[0] - m[4] / v1[1]));\n\n  return out;\n}\n\n// -- Camera matrices --\n\n/**\n * Calculate the {@link Mat4} orthographic projection matrix.\n * To apply a glTF orthographic camera, use: left = -xmag, right = xmag, bottom = -ymag, top = ymag.\n * @see https://en.wikipedia.org/wiki/Orthographic_projection\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\n */\nexport function ortho(\n  left: Float, right: Float, bottom: Float, top: Float, znear: Float, zfar: Float,\n  out: Mat4 = mat4.create()\n): Mat4 {\n  const x: Float = 1 / (right - left);\n  const y: Float = 1 / (top - bottom);\n  const z: Float = 1 / (znear - zfar);\n\n  mat4.id(out);\n  unchecked(out[0] = 2 * x);\n  unchecked(out[5] = 2 * y);\n  unchecked(out[10] = 2 * z);\n  unchecked(out[12] = -(right + left) * x);\n  unchecked(out[13] = -(top + bottom) * y);\n  unchecked(out[14] = (znear + zfar) * z);\n  return out;\n}\n\n/**\n * Calculate the {@link Mat4} perspective projection using glTF's formula. Use infinite projection if zfar = Infinity.\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\n * @param zfar defaults to Infinity\n */\nexport function perspective(\n  aspectRatio: Float, yfov: Float, znear: Float, zfar: Float = Infinity,\n  out: Mat4 = mat4.create()\n): Mat4 {\n  const f: Float = 1 / (Math.tan(yfov / 2) as Float);\n\n  mat4.id(out);\n  unchecked(out[0] = f / aspectRatio);\n  unchecked(out[5] = f);\n  unchecked(out[11] = -1);\n  unchecked(out[15] = 0);\n\n  if (isFinite(zfar)) {\n    const rangeInv: Float = 1 / (znear - zfar);\n    unchecked(out[10] = (znear + zfar) * rangeInv);\n    unchecked(out[14] = 2 * znear * zfar * rangeInv);\n  } else {\n    unchecked(out[10] = -1);\n    unchecked(out[14] = -2 * znear);\n  }\n\n  return out;\n}\n\n/**\n * Calculate the {@link Mat4} model matrix for a camera at eye position looking at the center\n * position with a given up direction.\n */\nexport function targetTo(\n  eye: ReadonlyVec3, center: ReadonlyVec3, up: ReadonlyVec3 = vec3.create(0, 1, 0),\n  out: Mat4 = mat4.create()\n): Mat4 {\n  const v: Vec3 = vec3.sub(eye, center, v0); // front\n  vec3.norm(v, v);\n  const n: Vec3 = vec3.cross(up, v, v1); // right\n  vec3.norm(n, n);\n  const u: Vec3 = vec3.cross(v, n, v2); // up\n  vec3.norm(u, u);\n\n  mat.copy(n, out, 0, 0, 3);\n  mat.copy(u, out, 0, 4, 3);\n  mat.copy(v, out, 0, 8, 3);\n  mat.copy(eye, out, 0, 12, 3);\n  unchecked(out[3] = out[7] = out[11] = 0);\n  unchecked(out[15] = 1);\n  return out;\n}\n\n/**\n * Calculate the {@link Mat4} view matrix for a camera at eye position looking at the center\n * position with a given up direction.\n * @param center defaults to the origin, i.e. [0, 0, 0]\n * @param up defaults to the positive y-axis, i.e. [0, 1, 0]\n */\nexport function lookAt(\n  eye: ReadonlyVec3,\n  center: ReadonlyVec3 = vec3.create(),\n  up: ReadonlyVec3 = vec3.create(0, 1, 0),\n  out: Mat4 = mat4.create()\n): Mat4 {\n  const v: Vec3 = vec3.sub(center, eye, v0); // front\n  vec3.norm(v, v);\n  const n: Vec3 = vec3.cross(v, up, v1); // right\n  vec3.norm(n, n);\n  const u: Vec3 = vec3.cross(n, v, v2); // up\n  vec3.norm(u, u);\n\n  unchecked(out[0] = n[0]);\n  unchecked(out[1] = u[0]);\n  unchecked(out[2] = -v[0]);\n  unchecked(out[4] = n[1]);\n  unchecked(out[5] = u[1]);\n  unchecked(out[6] = -v[1]);\n  unchecked(out[8] = n[2]);\n  unchecked(out[9] = u[2]);\n  unchecked(out[10] = -v[2]);\n  unchecked(out[12] = -vec3.dot(n, eye));\n  unchecked(out[13] = -vec3.dot(u, eye));\n  unchecked(out[14] = vec3.dot(v, eye));\n  unchecked(out[3] = out[7] = out[11] = 0);\n  unchecked(out[15] = 1);\n  return out;\n}\n\n/**\n * Calculate the look-at direction {@link Vec3} vector from pitch (up/down) and yaw (left/right) angles in radians.\n * It looks towards -Z axis when pitch = 0 and yaw = 0.\n * This can be used with lookAt method to build an FPS camera view matrix by:\n * viewMatrix = lookAt(eye, add(eye, direction(yaw, pitch)), [0, 1, 0])\n */\nexport function direction(pitch: Float, yaw: Float, out: Vec3 = vec3.create()): Vec3 {\n  const negCosPitch: Float = -Math.cos(pitch) as Float;\n  unchecked(out[0] = negCosPitch * Math.sin(yaw) as Float);\n  unchecked(out[1] = Math.sin(pitch) as Float);\n  unchecked(out[2] = negCosPitch * Math.cos(yaw) as Float);\n  return out;\n}\n"],"mappings":"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"}