{"version":3,"sources":["../assembly/transform.ts"],"names":["array","mat4","quat","vec3","copysign","v0","create","v1","v2","translate","v","out","id","copy","scale","s","rotate","q","toMat4","rotateX","theta","Math","cos","sin","rotateY","rotateZ","rotateAxis","axis","x","y","z","c","omc","transform","translation","rotation","scaling","i","j","translationOf","m","scaleOf","len","rotationOf","m00","m11","m22","sqrt","max","ortho","left","right","bottom","top","znear","zfar","perspective","aspectRatio","yfov","Infinity","f","tan","isFinite","rangeInv","targetTo","eye","center","up","sub","norm","n","cross","u","lookAt","dot","direction","pitch","yaw","negCosPitch"],"mappings":"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","sourcesContent":["import { Float, Mat4, Quat, ReadonlyMat4, ReadonlyQuat, ReadonlyVec3, Vec3 } from './types';\r\nimport * as array from './array';\r\nimport * as mat4 from './mat4';\r\nimport * as quat from './quat';\r\nimport * as vec3 from './vec3';\r\nimport { copysign } from './scalar';\r\n\r\n// Temp variables\r\nconst v0: Vec3 = vec3.create();\r\nconst v1: Vec3 = vec3.create();\r\nconst v2: Vec3 = vec3.create();\r\n\r\n/**\r\n * Return a {@link Mat4} for a 3D point translated by (x, y, z).\r\n */\r\nexport function translate(v: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  array.copy(v, out, 0, 12, 3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Return a {@link Mat4} for a 3D point scaled by (x, y, z).\r\n */\r\nexport function scale(s: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[0] = s[0]);\r\n  unchecked(out[5] = s[1]);\r\n  unchecked(out[10] = s[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a rotation by a {@link Quat}.\r\n */\r\nexport function rotate(q: ReadonlyQuat, out: Mat4 = mat4.create()): Mat4 {\r\n  return quat.toMat4(q, out);\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about the x-axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateX(theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[5] = out[10] = Math.cos(theta) as Float);\r\n  unchecked(out[6] = out[9] = Math.sin(theta) as Float);\r\n  unchecked(out[9] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about the y-axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateY(theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[0] = out[10] = Math.cos(theta) as Float);\r\n  unchecked(out[2] = out[8] = Math.sin(theta) as Float);\r\n  unchecked(out[2] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about the z-axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateZ(theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  mat4.id(out);\r\n  unchecked(out[0] = out[5] = Math.cos(theta) as Float);\r\n  unchecked(out[1] = out[4] = Math.sin(theta) as Float);\r\n  unchecked(out[4] *= -1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for a 3D rotation about a given unit axis in couterclockwise direction.\r\n * see: https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\r\n */\r\nexport function rotateAxis(axis: ReadonlyVec3, theta: Float, out: Mat4 = mat4.create()): Mat4 {\r\n  const\r\n    x: Float = unchecked(axis[0]),\r\n    y: Float = unchecked(axis[1]),\r\n    z: Float = unchecked(axis[2]);\r\n  const s: Float = Math.sin(theta) as Float;\r\n  const c: Float = Math.cos(theta) as Float;\r\n  const omc: Float = 1 - c;\r\n\r\n  unchecked(out[0] = x * x * omc + c);\r\n  unchecked(out[1] = x * y * omc + z * s);\r\n  unchecked(out[2] = x * z * omc - y * s);\r\n  unchecked(out[4] = y * x * omc - z * s);\r\n  unchecked(out[5] = y * y * omc + c);\r\n  unchecked(out[6] = y * z * omc + x * s);\r\n  unchecked(out[8] = z * x * omc + y * s);\r\n  unchecked(out[9] = z * y * omc - x * s);\r\n  unchecked(out[10] = z * z * omc + c);\r\n  unchecked(out[3] = out[7] = out[11] = out[12] = out[13] = out[14] = 0);\r\n  unchecked(out[15] = 1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a {@link Mat4} for transformation in TRS order (= translation * rotation * scale).\r\n * @returns out = translation * rotation * scale\r\n */\r\nexport function transform(translation: ReadonlyVec3, rotation: ReadonlyQuat, scaling: ReadonlyVec3, out: Mat4 = mat4.create()): Mat4 {\r\n  // Apply rotation\r\n  rotate(rotation, out);\r\n\r\n  // Apply scaling\r\n  for (let i = 0; i < 3; ++i) {\r\n    for (let j = 0; j < 3; ++j) {\r\n      unchecked(out[4 * i + j] *= scaling[i]);\r\n    }\r\n  }\r\n\r\n  // Apply translation\r\n  array.copy(translation, out, 0, 12, 3);\r\n\r\n  return out;\r\n}\r\n\r\n// -- Transformation matrix decomposition --\r\n\r\n/**\r\n * Extract the {@link Vec3} translation component from a transformation matrix.\r\n */\r\nexport function translationOf(m: ReadonlyMat4, out: Vec3 = vec3.create()): Vec3 {\r\n  return array.copy(m, out, 12, 0, 3) as Vec3;\r\n}\r\n\r\n/**\r\n * Extract the {@link Vec3} scaling components from an affine transformation matrix.\r\n */\r\nexport function scaleOf(m: ReadonlyMat4, out: Vec3 = vec3.create()): Vec3 {\r\n  for (let i = 0; i < 3; ++i) {\r\n    for (let j = 0; j < 3; ++j) {\r\n      unchecked(v0[j] = m[4 * i + j]);\r\n    }\r\n    unchecked(out[i] = vec3.len(v0));\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Extract the {@link Quat} rotation components from an affine transformation matrix.\r\n * @see https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\r\n */\r\nexport function rotationOf(m: ReadonlyMat4, out: Quat = quat.create()): Quat {\r\n  scaleOf(m, v1);\r\n  const\r\n    m00: Float = unchecked(m[0] / v1[0]),\r\n    m11: Float = unchecked(m[5] / v1[1]),\r\n    m22: Float = unchecked(m[10] / v1[2]);\r\n\r\n  unchecked(out[3] = (Math.sqrt(Math.max(0, 1 + m00 + m11 + m22)) as Float) / 2);\r\n  unchecked(out[0] = copysign((Math.sqrt(Math.max(0, 1 + m00 - m11 - m22)) as Float) / 2, m[6] / v1[1] - m[9] / v1[2]));\r\n  unchecked(out[1] = copysign((Math.sqrt(Math.max(0, 1 - m00 + m11 - m22)) as Float) / 2, m[8] / v1[2] - m[2] / v1[0]));\r\n  unchecked(out[2] = copysign((Math.sqrt(Math.max(0, 1 - m00 - m11 + m22)) as Float) / 2, m[1] / v1[0] - m[4] / v1[1]));\r\n\r\n  return out;\r\n}\r\n\r\n// -- Camera matrices --\r\n\r\n/**\r\n * Calculate the {@link Mat4} orthographic projection matrix.\r\n * To apply a glTF orthographic camera, use: left = -xmag, right = xmag, bottom = -ymag, top = ymag.\r\n * @see https://en.wikipedia.org/wiki/Orthographic_projection\r\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\r\n */\r\nexport function ortho(\r\n  left: Float, right: Float, bottom: Float, top: Float, znear: Float, zfar: Float,\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const x: Float = 1 / (right - left);\r\n  const y: Float = 1 / (top - bottom);\r\n  const z: Float = 1 / (znear - zfar);\r\n\r\n  mat4.id(out);\r\n  unchecked(out[0] = 2 * x);\r\n  unchecked(out[5] = 2 * y);\r\n  unchecked(out[10] = 2 * z);\r\n  unchecked(out[12] = -(right + left) * x);\r\n  unchecked(out[13] = -(top + bottom) * y);\r\n  unchecked(out[14] = (znear + zfar) * z);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} perspective projection using glTF's formula. Use infinite projection if zfar = Infinity.\r\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\r\n * @param zfar defaults to Infinity\r\n */\r\nexport function perspective(\r\n  aspectRatio: Float, yfov: Float, znear: Float, zfar: Float = Infinity,\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const f: Float = 1 / (Math.tan(yfov / 2) as Float);\r\n\r\n  mat4.id(out);\r\n  unchecked(out[0] = f / aspectRatio);\r\n  unchecked(out[5] = f);\r\n  unchecked(out[11] = -1);\r\n  unchecked(out[15] = 0);\r\n\r\n  if (isFinite(zfar)) {\r\n    const rangeInv: Float = 1 / (znear - zfar);\r\n    unchecked(out[10] = (znear + zfar) * rangeInv);\r\n    unchecked(out[14] = 2 * znear * zfar * rangeInv);\r\n  } else {\r\n    unchecked(out[10] = -1);\r\n    unchecked(out[14] = -2 * znear);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} model matrix for a camera at eye position looking at the center\r\n * position with a given up direction.\r\n */\r\nexport function targetTo(\r\n  eye: ReadonlyVec3, center: ReadonlyVec3, up: ReadonlyVec3 = vec3.create(0, 1, 0),\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const v: Vec3 = vec3.sub(eye, center, v0); // front\r\n  vec3.norm(v, v);\r\n  const n: Vec3 = vec3.cross(up, v, v1); // right\r\n  vec3.norm(n, n);\r\n  const u: Vec3 = vec3.cross(v, n, v2); // up\r\n  vec3.norm(u, u);\r\n\r\n  array.copy(n, out, 0, 0, 3);\r\n  array.copy(u, out, 0, 4, 3);\r\n  array.copy(v, out, 0, 8, 3);\r\n  array.copy(eye, out, 0, 12, 3);\r\n  unchecked(out[3] = out[7] = out[11] = 0);\r\n  unchecked(out[15] = 1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the {@link Mat4} view matrix for a camera at eye position looking at the center\r\n * position with a given up direction.\r\n * @param center defaults to the origin, i.e. [0, 0, 0]\r\n * @param up defaults to the positive y-axis, i.e. [0, 1, 0]\r\n */\r\nexport function lookAt(\r\n  eye: ReadonlyVec3,\r\n  center: ReadonlyVec3 = vec3.create(),\r\n  up: ReadonlyVec3 = vec3.create(0, 1, 0),\r\n  out: Mat4 = mat4.create()\r\n): Mat4 {\r\n  const v: Vec3 = vec3.sub(center, eye, v0); // front\r\n  vec3.norm(v, v);\r\n  const n: Vec3 = vec3.cross(v, up, v1); // right\r\n  vec3.norm(n, n);\r\n  const u: Vec3 = vec3.cross(n, v, v2); // up\r\n  vec3.norm(u, u);\r\n\r\n  unchecked(out[0] = n[0]);\r\n  unchecked(out[1] = u[0]);\r\n  unchecked(out[2] = -v[0]);\r\n  unchecked(out[4] = n[1]);\r\n  unchecked(out[5] = u[1]);\r\n  unchecked(out[6] = -v[1]);\r\n  unchecked(out[8] = n[2]);\r\n  unchecked(out[9] = u[2]);\r\n  unchecked(out[10] = -v[2]);\r\n  unchecked(out[12] = -vec3.dot(n, eye));\r\n  unchecked(out[13] = -vec3.dot(u, eye));\r\n  unchecked(out[14] = vec3.dot(v, eye));\r\n  unchecked(out[3] = out[7] = out[11] = 0);\r\n  unchecked(out[15] = 1);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the look-at direction {@link Vec3} vector from pitch (up/down) and yaw (left/right) angles in radians.\r\n * It looks towards -Z axis when pitch = 0 and yaw = 0.\r\n * This can be used with lookAt method to build an FPS camera view matrix by:\r\n * viewMatrix = lookAt(eye, add(eye, direction(yaw, pitch)), [0, 1, 0])\r\n */\r\nexport function direction(pitch: Float, yaw: Float, out: Vec3 = vec3.create()): Vec3 {\r\n  const negCosPitch: Float = -Math.cos(pitch) as Float;\r\n  unchecked(out[0] = negCosPitch * Math.sin(yaw) as Float);\r\n  unchecked(out[1] = Math.sin(pitch) as Float);\r\n  unchecked(out[2] = negCosPitch * Math.cos(yaw) as Float);\r\n  return out;\r\n}\r\n"],"file":"transform.js"}