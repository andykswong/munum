import*as vec3 from"./vec3.js";import*as plane from"./plane.js";const FRUSTUM_PLANES=6;const v0=vec3.create();export function create(left=plane.create(),right=plane.create(),bottom=plane.create(),top=plane.create(),near=plane.create(),far=plane.create()){return[left,right,bottom,top,near,far]}export function copy(a,out=create()){for(let i=0;i<FRUSTUM_PLANES;++i){plane.copy(a[i],out[i])}return out}export function fromViewProj(m,out=create()){plane.set(out[0],m[3]+m[0],m[7]+m[4],m[11]+m[8],m[15]+m[12]);plane.set(out[1],m[3]-m[0],m[7]-m[4],m[11]-m[8],m[15]-m[12]);plane.set(out[2],m[3]+m[1],m[7]+m[5],m[11]+m[9],m[15]+m[13]);plane.set(out[3],m[3]-m[1],m[7]-m[5],m[11]-m[9],m[15]-m[13]);plane.set(out[4],m[3]+m[2],m[7]+m[6],m[11]+m[10],m[15]+m[14]);plane.set(out[5],m[3]-m[2],m[7]-m[6],m[11]-m[10],m[15]-m[14]);for(let i=0;i<FRUSTUM_PLANES;++i){plane.norm(out[i],out[i])}return out}export function containsPoint(f,center,radius=0){for(let i=0;i<FRUSTUM_PLANES;++i){if(plane.dist(f[i],center)<-radius){return false}}return true}export function containsAABB(f,box){for(let i=0;i<FRUSTUM_PLANES;++i){v0[0]=f[i][0]>0?box.max[0]:box.min[0];v0[1]=f[i][1]>0?box.max[1]:box.min[1];v0[2]=f[i][2]>0?box.max[2]:box.min[2];if(plane.dist(f[i],v0)<0){return false}}return true}
//# sourceMappingURL=frustum.js.map