{"version":3,"sources":["../assembly/array.ts"],"names":["EPSILON","fequal","fequalNum","lerp","lerpNum","copy","src","dst","srcOffset","dstOffset","count","length","i","copyEx","a","b","epsilon","add","out","sub","scale","s","mul","t","dot","f","transpose","n","m","j","mmul","rr","rc","k"],"mappings":"OACSA,O,CAASC,MAAM,GAAIC,CAAAA,S,CAAWC,IAAI,GAAIC,CAAAA,O,mBAM/C,MAAO,SAASC,CAAAA,IAAT,CACLC,GADK,CACaC,GADb,CACuBC,SAAc,CAAG,CADxC,CAC2CC,SAAc,CAAG,CAD5D,CAC+DC,KAAU,CAAGJ,GAAG,CAACK,MAAJ,CAAaH,SADzF,CAEA,CACL,IAAK,GAAII,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,KAApB,CAA2B,EAAEE,CAA7B,CAAgC,CACpBL,GAAG,CAACE,SAAS,CAAGG,CAAb,CAAH,CAAqBN,GAAG,CAACE,SAAS,CAAGI,CAAb,CACnC,CACD,MAAOL,CAAAA,GACR,CAMD,MAAO,SAASM,CAAAA,MAAT,CAAsBP,GAAtB,CAA8BC,GAA9B,CAAsCC,SAAtC,CAAsDC,SAAtD,CAAsEC,KAAtE,CAAqF,CAC1F,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,KAApB,CAA2B,EAAEE,CAA7B,CAAgC,CAEpBL,GAAG,CAACE,SAAS,CAAGG,CAAb,CAAH,CAAqBN,GAAG,CAACE,SAAS,CAAGI,CAAb,CACnC,CACD,MAAOL,CAAAA,GACR,CAMD,MAAO,SAASN,CAAAA,MAAT,CAAgBa,CAAhB,CAAgCC,CAAhC,CAAgDC,OAAc,CAAGhB,OAAjE,CAAmF,CACxF,GAAIc,CAAC,CAACH,MAAF,CAAWI,CAAC,CAACJ,MAAjB,CAAyB,CACvB,MAAO,MACR,CACD,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACjC,GAAI,CAAWV,SAAS,CAACY,CAAC,CAACF,CAAD,CAAF,CAAOG,CAAC,CAACH,CAAD,CAAR,CAAaI,OAAb,CAAxB,CAAgD,CAC9C,MAAO,MACR,CACF,CACD,MAAO,KACR,CAMD,MAAO,SAASC,CAAAA,GAAT,CAAaH,CAAb,CAA6BC,CAA7B,CAA6CG,GAA7C,CAA4D,CACjE,IAAK,GAAIN,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACvBM,GAAG,CAACN,CAAD,CAAH,CAASE,CAAC,CAACF,CAAD,CAAD,CAAOG,CAAC,CAACH,CAAD,CAC5B,CACD,MAAOM,CAAAA,GACR,CAMD,MAAO,SAASC,CAAAA,GAAT,CAAaL,CAAb,CAA6BC,CAA7B,CAA6CG,GAA7C,CAA4D,CACjE,IAAK,GAAIN,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACvBM,GAAG,CAACN,CAAD,CAAH,CAASE,CAAC,CAACF,CAAD,CAAD,CAAOG,CAAC,CAACH,CAAD,CAC5B,CACD,MAAOM,CAAAA,GACR,CAMD,MAAO,SAASE,CAAAA,KAAT,CAAeN,CAAf,CAA+BO,CAA/B,CAAyCH,GAAzC,CAAwD,CAC7D,IAAK,GAAIN,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACvBM,GAAG,CAACN,CAAD,CAAH,CAASE,CAAC,CAACF,CAAD,CAAD,CAAOS,CAC3B,CACD,MAAOH,CAAAA,GACR,CAMD,MAAO,SAASI,CAAAA,GAAT,CAAaR,CAAb,CAA6BC,CAA7B,CAA6CG,GAA7C,CAA4D,CACjE,IAAK,GAAIN,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACvBM,GAAG,CAACN,CAAD,CAAH,CAASE,CAAC,CAACF,CAAD,CAAD,CAAOG,CAAC,CAACH,CAAD,CAC5B,CACD,MAAOM,CAAAA,GACR,CAMD,MAAO,SAASf,CAAAA,IAAT,CAAcW,CAAd,CAA8BC,CAA9B,CAA8CQ,CAA9C,CAAwDL,GAAxD,CAAuE,CAC5E,IAAK,GAAIN,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACvBM,GAAG,CAACN,CAAD,CAAH,CAASR,OAAO,CAACU,CAAC,CAACF,CAAD,CAAF,CAAOG,CAAC,CAACH,CAAD,CAAR,CAAaW,CAAb,CAC3B,CACD,MAAOL,CAAAA,GACR,CAMD,MAAO,SAASM,CAAAA,GAAT,CAAaV,CAAb,CAA6BC,CAA7B,CAAoD,CACzD,GAAIU,CAAAA,CAAQ,CAAG,CAAf,CACA,IAAK,GAAIb,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,CAAC,CAACH,MAAtB,CAA8B,EAAEC,CAAhC,CAAmC,CACjCa,CAAC,EAAcX,CAAC,CAACF,CAAD,CAAD,CAAOG,CAAC,CAACH,CAAD,CACxB,CACD,MAAOa,CAAAA,CACR,CASD,MAAO,SAASC,CAAAA,SAAT,CAAmBC,CAAnB,CAA2BC,CAA3B,CAA2CV,GAA3C,CAA0D,CAC/D,GAAIO,CAAAA,CAAQ,CAAG,CAAf,CACA,IAAK,GAAIb,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGe,CAApB,CAAuB,EAAEf,CAAzB,CAA4B,CAC1B,IAAK,GAAIiB,CAAAA,CAAC,CAAGjB,CAAb,CAAgBiB,CAAC,CAAGF,CAApB,CAAuB,EAAEE,CAAzB,CAA4B,CAE1BJ,CAAC,CAAaG,CAAC,CAACC,CAAC,CAAGF,CAAJ,CAAQf,CAAT,CAAf,CACUM,GAAG,CAACW,CAAC,CAAGF,CAAJ,CAAQf,CAAT,CAAH,CAAiBgB,CAAC,CAAChB,CAAC,CAAGe,CAAJ,CAAQE,CAAT,CAA5B,CACUX,GAAG,CAACN,CAAC,CAAGe,CAAJ,CAAQE,CAAT,CAAH,CAAiBJ,CAC5B,CACF,CACD,MAAOP,CAAAA,GACR,CAUD,MAAO,SAASY,CAAAA,IAAT,CAAcH,CAAd,CAAsBb,CAAtB,CAAsCC,CAAtC,CAAsDG,GAAtD,CAAqE,CAC1E,KAAMa,CAAAA,EAAE,CAAIjB,CAAC,CAACH,MAAF,CAAWgB,CAAvB,CACA,KAAMK,CAAAA,EAAE,CAAIjB,CAAC,CAACJ,MAAF,CAAWgB,CAAvB,CACA,GAAIF,CAAAA,CAAQ,CAAG,CAAf,CAEA,IAAK,GAAIb,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGoB,EAApB,CAAwB,EAAEpB,CAA1B,CAA6B,CAC3B,IAAK,GAAIiB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGE,EAApB,CAAwB,EAAEF,CAA1B,CAA6B,CAC3BJ,CAAC,CAAG,CAAJ,CACA,IAAK,GAAIQ,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,CAApB,CAAuB,EAAEM,CAAzB,CAA4B,CAC1BR,CAAC,EAAcX,CAAC,CAACmB,CAAC,CAAGF,EAAJ,CAASF,CAAV,CAAD,CAAgBd,CAAC,CAACH,CAAC,CAAGe,CAAJ,CAAQM,CAAT,CACjC,CACSf,GAAG,CAACN,CAAC,CAAGmB,EAAJ,CAASF,CAAV,CAAH,CAAkBJ,CAC7B,CACF,CAED,MAAOP,CAAAA,GACR","sourcesContent":["import { Float, Int, ReadonlyVec, Vec } from './types';\r\nimport { EPSILON, fequal as fequalNum, lerp as lerpNum } from './scalar';\r\n\r\n/**\r\n * Copy elements from one float vec to another, and returns the destination array.\r\n * @returns dst\r\n */\r\nexport function copy(\r\n  src: ReadonlyVec, dst: Vec, srcOffset: Int = 0, dstOffset: Int = 0, count: Int = src.length - srcOffset\r\n): Vec {\r\n  for (let i = 0; i < count; ++i) {\r\n    unchecked(dst[dstOffset + i] = src[srcOffset + i]);\r\n  }\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Generic function to copy elements from any array-like object to another.\r\n * This is only useful for use within AssemblyScript. For JS build, you can simply use {@link copy}.\r\n */\r\nexport function copyEx<T, U>(src: T, dst: U, srcOffset: Int, dstOffset: Int, count: Int): U {\r\n  for (let i = 0; i < count; ++i) {\r\n    // @ts-ignore: Skip type checking\r\n    unchecked(dst[dstOffset + i] = src[srcOffset + i]);\r\n  }\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Check if 2 number arrays have equal length and equal values within an epsilon.\r\n * @returns a == b\r\n */\r\nexport function fequal(a: ReadonlyVec, b: ReadonlyVec, epsilon: Float = EPSILON): boolean {\r\n  if (a.length - b.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (!unchecked(fequalNum(a[i], b[i], epsilon))) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Sum 2 vectors.\r\n * @returns out = a + b\r\n */\r\nexport function add(a: ReadonlyVec, b: ReadonlyVec, out: Vec): Vec {\r\n  for (let i = 0; i < a.length; ++i) {\r\n    unchecked(out[i] = a[i] + b[i]);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtract 2 vectors.\r\n * @returns out = a - b\r\n */\r\nexport function sub(a: ReadonlyVec, b: ReadonlyVec, out: Vec): Vec {\r\n  for (let i = 0; i < a.length; ++i) {\r\n    unchecked(out[i] = a[i] - b[i]);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scale a vector by a constant.\r\n * @returns out = s * a\r\n */\r\nexport function scale(a: ReadonlyVec, s: Float, out: Vec): Vec {\r\n  for (let i = 0; i < a.length; ++i) {\r\n    unchecked(out[i] = a[i] * s);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply 2 vectors component-wise.\r\n * @returns out = a * b\r\n */\r\nexport function mul(a: ReadonlyVec, b: ReadonlyVec, out: Vec): Vec {\r\n  for (let i = 0; i < a.length; ++i) {\r\n    unchecked(out[i] = a[i] * b[i]);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Lerp 2 vectors.\r\n * @returns out = lerp(a, b, t)\r\n */\r\nexport function lerp(a: ReadonlyVec, b: ReadonlyVec, t: Float, out: Vec): Vec {\r\n  for (let i = 0; i < a.length; ++i) {\r\n    unchecked(out[i] = lerpNum(a[i], b[i], t));\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the dot product of a 2 vectors.\r\n * @returns a * b\r\n */\r\nexport function dot(a: ReadonlyVec, b: ReadonlyVec): Float {\r\n  let f: Float = 0;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    f += unchecked(a[i] * b[i]);\r\n  }\r\n  return f;\r\n}\r\n\r\n/**\r\n * Transpose a matrix.\r\n * @param n matrix order\r\n * @param m the matrix\r\n * @param out the output matrix\r\n * @returns out = [M]T\r\n */\r\nexport function transpose(n: Int, m: ReadonlyVec, out: Vec): Vec {\r\n  let f: Float = 0;\r\n  for (let i = 0; i < n; ++i) {\r\n    for (let j = i; j < n; ++j) {\r\n      // Swap mij and mji\r\n      f = unchecked(m[j * n + i]);\r\n      unchecked(out[j * n + i] = m[i * n + j]);\r\n      unchecked(out[i * n + j] = f);\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate matrix multiplication of a * b, where size of a is (rr * n), and b is (n * rc).\r\n * @param n matrix order\r\n * @param a matrix of size rr * n\r\n * @param b matrix of size n * rc\r\n * @param out the output matrix of size rr * rc, must not be the same object as a or b\r\n * @returns out = a * b\r\n */\r\nexport function mmul(n: Int, a: ReadonlyVec, b: ReadonlyVec, out: Vec): Vec {\r\n  const rr = (a.length / n) as Int;\r\n  const rc = (b.length / n) as Int;\r\n  let f: Float = 0;\r\n\r\n  for (let i = 0; i < rc; ++i) {\r\n    for (let j = 0; j < rr; ++j) {\r\n      f = 0;\r\n      for (let k = 0; k < n; ++k) {\r\n        f += unchecked(a[k * rr + j] * b[i * n + k]);\r\n      }\r\n      unchecked(out[i * rr + j] = f);\r\n    }\r\n  }\r\n\r\n  return out;\r\n}\r\n"],"file":"array.js"}