import*as array from"./array.js";import*as vec4 from"./vec4.js";const v=create();const v4a=vec4.create();const v4b=vec4.create();export function create(x=0,y=0,z=0){return[x,y,z]}export function set(v,x=0,y=0,z=0){v[0]=x;v[1]=y;v[2]=z;return v}export function copy(v,out=create()){return array.copy(v,out)}export function add(a,b,out=create()){return array.add(a,b,out)}export function sub(a,b,out=create()){return array.sub(a,b,out)}export function scale(v,s,out=create()){return array.scale(v,s,out)}export function mul(v,s,out=create()){return array.mul(v,s,out)}export function mmul(a,b,out=create()){return array.copy(array.mmul(3,a,b,v),out)}export function mmul4(m,x,out=create()){vec4.set(v4a,x[0],x[1],x[2],1);return array.copy(array.mmul(4,m,v4a,v4b),out,0,0,3)}export function dot(a,b){return array.dot(a,b)}export function lerp(a,b,t,out=create()){return array.lerp(a,b,t,out)}export function len2(v){return dot(v,v)}export function len(v){return Math.sqrt(dot(v,v))}export function dist(a,b){return len(sub(a,b,v))}export function norm(v,out=create()){return array.scale(v,1/(len(v)||1),out)}export function cross(a,b,out=create()){const y=a[2]*b[0]-b[2]*a[0];const z=a[0]*b[1]-b[0]*a[1];out[0]=a[1]*b[2]-b[1]*a[2];out[1]=y;out[2]=z;return out}
//# sourceMappingURL=vec3.js.map