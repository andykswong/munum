{"version":3,"sources":["../assembly/vec2.ts"],"names":["array","vec3","v","create","v3a","v3b","x","y","set","copy","out","add","a","b","sub","scale","s","mul","mmul","m","mmul3","dot","lerp","t","len2","len","Math","hypot","dist","norm"],"mappings":"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","sourcesContent":["import { Float, ReadonlyMat2, ReadonlyMat3, ReadonlyVec2, Vec2, Vec3 } from './types';\r\nimport * as array from './array';\r\nimport * as vec3 from './vec3';\r\n\r\n// Temp variables\r\nconst v: Vec2 = create();\r\nconst v3a: Vec3 = vec3.create();\r\nconst v3b: Vec3 = vec3.create();\r\n\r\n/**\r\n * Create a new {@link Vec2}.\r\n * @param x defaults to 0\r\n * @param y defaults to 0\r\n * @returns [x, y]\r\n */\r\nexport function create(x: Float = 0, y: Float = 0): Vec2 {\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * Set values of a {@link Vec2}.\r\n * @param v the vec\r\n * @param x defaults to 0\r\n * @param y defaults to 0\r\n * @returns v\r\n */\r\nexport function set(v: Vec2, x: Float = 0, y: Float = 0): Vec2 {\r\n  unchecked(v[0] = x);\r\n  unchecked(v[1] = y);\r\n  return v;\r\n}\r\n\r\n/**\r\n * Copy a {@link Vec2}.\r\n * @returns out\r\n */\r\nexport function copy(v: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  return array.copy(v, out) as Vec2;\r\n}\r\n\r\n/**\r\n * Sum 2 {@link Vec2}.\r\n * @returns out = a + b\r\n */\r\nexport function add(a: ReadonlyVec2, b: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  return array.add(a, b, out) as Vec2;\r\n}\r\n\r\n/**\r\n * Subtract 2 {@link Vec2}.\r\n * @returns out = a - b\r\n */\r\nexport function sub(a: ReadonlyVec2, b: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  return array.sub(a, b, out) as Vec2;\r\n}\r\n\r\n/**\r\n * Multiply a {@link Vec2} by a constant.\r\n * @returns out = s * v\r\n */\r\nexport function scale(v: ReadonlyVec2, s: Float, out: Vec2 = create()): Vec2 {\r\n  return array.scale(v, s, out) as Vec2;\r\n}\r\n\r\n/**\r\n * Multiply 2 {@link Vec2} element-wise.\r\n * @returns out = a * b\r\n */\r\nexport function mul(v: ReadonlyVec2, s: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  return array.mul(v, s, out) as Vec2;\r\n}\r\n\r\n/**\r\n * Multiply a {@link ReadonlyMat2} with a {@link ReadonlyVec2}.\r\n * @returns out = m * x\r\n */\r\nexport function mmul(m: ReadonlyMat2, x: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  return array.copy(array.mmul(2, m, x, v), out) as Vec2;\r\n}\r\n\r\n/**\r\n * Transform a {@link ReadonlyVec2} by a {@link ReadonlyMat3}.\r\n * @returns out = m * [x 1]\r\n */\r\nexport function mmul3(m: ReadonlyMat3, x: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  unchecked(vec3.set(v3a, x[0], x[1], 1));\r\n  return array.copy(array.mmul(3, m, v3a, v3b), out, 0, 0, 2) as Vec2;\r\n}\r\n\r\n/**\r\n * Calculate the dot product of 2 {@link Vec2}.\r\n * @returns a * b\r\n */\r\nexport function dot(a: ReadonlyVec2, b: ReadonlyVec2): Float {\r\n  return array.dot(a, b);\r\n}\r\n\r\n/**\r\n * Linear interpolate 2 {@link Vec2}.\r\n * @returns out = lerp(a, b, t)\r\n */\r\nexport function lerp(a: ReadonlyVec2, b: ReadonlyVec2, t: Float, out: Vec2 = create()): Vec2 {\r\n  return array.lerp(a, b, t, out) as Vec2;\r\n}\r\n\r\n/**\r\n * Calculate squared length of a {@link Vec2}.\r\n * @returns dot(v, v)\r\n */\r\nexport function len2(v: ReadonlyVec2): Float {\r\n  return dot(v, v);\r\n}\r\n\r\n/**\r\n * Calculate length of a {@link Vec2}.\r\n * @returns |v|\r\n */\r\nexport function len(v: ReadonlyVec2): Float {\r\n  return Math.hypot(v[0], v[1]) as Float;\r\n}\r\n\r\n/**\r\n * Calculate Euclidean distance of 2 {@link Vec2}.\r\n * @returns |a - b|\r\n */\r\nexport function dist(a: ReadonlyVec2, b: ReadonlyVec2): Float {\r\n  return len(sub(a, b, v));\r\n}\r\n\r\n/**\r\n * Normalize a {@link Vec2} and optionally stores result to the out param.\r\n * @returns v/|v|\r\n */\r\nexport function norm(v: ReadonlyVec2, out: Vec2 = create()): Vec2 {\r\n  return array.scale(v, 1 / (len(v) || 1), out) as Vec2;\r\n}\r\n"],"file":"vec2.js"}