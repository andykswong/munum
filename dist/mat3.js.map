{"version":3,"sources":["../assembly/mat3.ts"],"names":["array","m","create","id","out","i","copy","v","add","a","b","sub","scale","s","tr","mul","mmul","det","invert","detA","nmat"],"mappings":"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","sourcesContent":["import { Float, ReadonlyMat3, Mat3 } from './types';\r\nimport * as array from './array';\r\n\r\n// Temp variables\r\nconst m: Mat3 = create();\r\n\r\n/**\r\n * Create a new identity {@link Mat3}.\r\n * @returns identity mat3\r\n */\r\nexport function create(): Mat3 {\r\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n}\r\n\r\n/**\r\n * Set a {@link Mat3} to identity.\r\n * @returns out = I3\r\n */\r\nexport function id(out: Mat3): Mat3 {\r\n  for (let i = 0; i < 9; ++i) {\r\n    unchecked(out[i] = (i % 4) ? 0 : 1);\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy a {@link Mat3}.\r\n * @returns out\r\n */\r\nexport function copy(v: ReadonlyMat3, out: Mat3 = create()): Mat3 {\r\n  return array.copy(v, out) as Mat3;\r\n}\r\n\r\n/**\r\n * Sum 2 {@link Mat3}.\r\n * @returns out = a + b\r\n */\r\nexport function add(a: ReadonlyMat3, b: ReadonlyMat3, out: Mat3 = create()): Mat3 {\r\n  return array.add(a, b, out) as Mat3;\r\n}\r\n\r\n/**\r\n * Subtract 2 {@link Mat3}.\r\n * @returns out = a - b\r\n */\r\nexport function sub(a: ReadonlyMat3, b: ReadonlyMat3, out: Mat3 = create()): Mat3 {\r\n  return array.sub(a, b, out) as Mat3;\r\n}\r\n\r\n/**\r\n * Multiply a {@link Mat3} by a constant.\r\n * @returns out = s * M\r\n */\r\nexport function scale(m: ReadonlyMat3, s: Float, out: Mat3 = create()): Mat3 {\r\n  return array.scale(m, s, out) as Mat3;\r\n}\r\n\r\n/**\r\n * Transpose a {@link Mat3}.\r\n * @returns [M]T\r\n */\r\nexport function tr(m: ReadonlyMat3, out: Mat3 = create()): Mat3 {\r\n  return array.tr(3, m, out) as Mat3;\r\n}\r\n\r\n/**\r\n * Multiply 2 {@link Mat3}.\r\n * @returns out = a * b\r\n */\r\nexport function mul(a: ReadonlyMat3, b: ReadonlyMat3, out: Mat3 = create()): Mat3 {\r\n  return array.copy(array.mmul(3, a, b, m), out) as Mat3;\r\n}\r\n\r\n/**\r\n * Calculate the determinant of a {@link Mat3}.\r\n */\r\nexport function det(m: ReadonlyMat3): Float {\r\n  return unchecked(\r\n    m[0] * +(m[4] * m[8] - m[7] * m[5]) +\r\n    m[3] * -(m[1] * m[8] - m[7] * m[2]) +\r\n    m[6] * +(m[1] * m[5] - m[4] * m[2])\r\n  );\r\n}\r\n\r\n/**\r\n * Returns inverse of a {@link Mat3}, or null if matrix is not invertible.\r\n * @see https://en.wikipedia.org/wiki/Invertible_matrix#Inversion_of_3_%C3%97_3_matrices\r\n * @param a input matrix\r\n * @param out output matrix\r\n * @returns out = M^-1, or null if matrix is not invertible\r\n */\r\nexport function invert(a: ReadonlyMat3, out: Mat3 = create()): Mat3 | null {\r\n  const detA: Float = det(a);\r\n  if (!detA) {\r\n    return null;\r\n  }\r\n\r\n  unchecked(m[0] = +(a[4] * a[8] - a[7] * a[5]));\r\n  unchecked(m[1] = -(a[1] * a[8] - a[7] * a[2]));\r\n  unchecked(m[2] = +(a[1] * a[5] - a[4] * a[2]));\r\n  unchecked(m[3] = -(a[3] * a[8] - a[6] * a[5]));\r\n  unchecked(m[4] = +(a[0] * a[8] - a[6] * a[2]));\r\n  unchecked(m[5] = -(a[0] * a[5] - a[3] * a[2]));\r\n  unchecked(m[6] = +(a[3] * a[7] - a[6] * a[4]));\r\n  unchecked(m[7] = -(a[0] * a[7] - a[6] * a[1]));\r\n  unchecked(m[8] = +(a[0] * a[4] - a[3] * a[1]));\r\n\r\n  return scale(m, 1 / detA, out);\r\n}\r\n\r\n/**\r\n * Returns the normal matrix, which is the inverse transpose matrix, from a {@link ReadonlyMat3}.\r\n * @param a input matrix\r\n * @param out output matrix\r\n * @returns out = (M^-1)T, or null if matrix is not invertible\r\n */\r\nexport function nmat(a: ReadonlyMat3, out: Mat3 = create()): Mat3 | null {\r\n  if (!invert(a, out)) {\r\n    return null;\r\n  }\r\n  return tr(out, out);\r\n}\r\n"],"file":"mat3.js"}